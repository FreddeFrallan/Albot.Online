<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Assembly-CSharp</name>
    </assembly>
    <members>
        <member name="T:Barebones.MasterServer.RoomConnector">
            <summary>
                Base class for connectors.
                Connectors should provide means for client to connect
                to game server
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.RoomConnector.AccessData">
            <summary>
                Latest access data. When switching scenes, if this is set,
                connector should most likely try to use this data to connect to game server
                (if the scene is right)
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.RoomConnector.Instance">
            <summary>
                Connector instance
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.RoomConnector.ConnectToGame(Barebones.MasterServer.RoomAccessPacket)">
            <summary>
                Should try to connect to game server with data, provided
                in the access packet
            </summary>
            <param name="access"></param>
        </member>
        <member name="M:Barebones.MasterServer.RoomConnector.Connect(Barebones.MasterServer.RoomAccessPacket)">
            <summary>
                Publicly accessible method, which clients should use to connect
                to game servers
            </summary>
            <param name="packet"></param>
        </member>
        <member name="T:Barebones.MasterServer.ConnectionToMaster">
            <summary>
            Automatically connects to master server
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfDbAccessorFactory.SetAccessor``1(System.Object)">
            <summary>
            Adds a database accessor to the list of available accessors
            </summary>
            <typeparam name="T"></typeparam>
            <param name="access"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfDbAccessorFactory.GetAccessor``1">
            <summary>
            Retrieves a database accessor from a list of available accessors
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.EventsChannel.Fire(System.String)">
            <summary>
                Raises an event, so that listeners can react to it.
                Fire and forget. Returns true if something has subscribed to the event
            </summary>
            <param name="eventName"></param>
        </member>
        <member name="M:Barebones.MasterServer.EventsChannel.Fire(System.String,System.Object)">
            <summary>
                Raises an event, so that listeners can react to it.
                Fire and forget. Returns true if something has subscribed to the event
            </summary>
            <param name="eventName"></param>
            <param name="arg1"></param>
            <returns>True if there was at least one listener</returns>
        </member>
        <member name="M:Barebones.MasterServer.EventsChannel.Fire(System.String,System.Object,System.Object)">
            <summary>
                Raises an event, so that listeners can react to it.
                Fire and forget. Returns true if something has subscribed to the event
            </summary>
            <param name="eventName"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns>True if there was at least one listener</returns>
        </member>
        <member name="M:Barebones.MasterServer.EventsChannel.FireWithPromise(System.String)">
            <summary>
                Fires an event which has to be finished
            </summary>
            <param name="eventName"></param>
            <returns>Promise, which must be finished at some point</returns>
        </member>
        <member name="M:Barebones.MasterServer.EventsChannel.FireWithPromise(System.String,System.Object)">
            <summary>
                Fires an event which has to be finished
            </summary>
            <param name="eventName"></param>
            <param name="arg2"></param>
            <returns>Promise, which must be finished at some point</returns>
        </member>
        <member name="M:Barebones.MasterServer.EventsChannel.SubscribeManual(System.String,Barebones.MasterServer.EventsChannel.EventHandler)">
            <summary>
                Same as Subscribe, except doesn't unsubscribe automatically.
            </summary>
            <param name="eventName"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Barebones.MasterServer.EventsChannel.Subscribe(System.String,Barebones.MasterServer.EventsChannel.EventHandler)">
            <summary>
                Registers into a queue to wait for event to happen.
                Unsubscribes automatically, when scene unloads
            </summary>
            <param name="eventName"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Barebones.MasterServer.EventsChannel.Promise.Subscribe(System.Action{Barebones.MasterServer.EventsChannel.Promise})">
            <summary>
                Subscribe to event
                If this event is finished, callback will be called instantly
            </summary>
            <param name="action">Called when event has finished, or instantly, if it's finished at the time of subscription</param>
        </member>
        <member name="M:Barebones.MasterServer.EventsChannel.Promise.Finish(System.Object)">
            <summary>
                Notifies all listeners that this event has finished
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:Barebones.MasterServer.MasterServerBehaviour">
            <summary>
            Starts the master server
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.AuthModule">
            <summary>
            Authentication module, which handles logging in and registration of accounts
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.AuthModule.LoggedInUsers">
            <summary>
            Collection of users who are currently logged in
            </summary>
        </member>
        <member name="E:Barebones.MasterServer.AuthModule.LoggedIn">
            <summary>
            Invoked, when user logs in
            </summary>
        </member>
        <member name="E:Barebones.MasterServer.AuthModule.LoggedOut">
            <summary>
            Invoked, when user logs out
            </summary>
        </member>
        <member name="E:Barebones.MasterServer.AuthModule.Registered">
            <summary>
            Invoked, when user successfully registers an account
            </summary>
        </member>
        <member name="E:Barebones.MasterServer.AuthModule.EmailConfirmed">
            <summary>
            Invoked, when user successfully confirms his e-mail
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.AuthModule.HandlePasswordChange(Barebones.Networking.IIncommingMessage)">
            <summary>
            Handles client's request to change password
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Barebones.MasterServer.AuthModule.HandleGetLoggedInCount(Barebones.Networking.IIncommingMessage)">
            <summary>
            Handles a request to retrieve a number of logged in users
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Barebones.MasterServer.AuthModule.HandleEmailConfirmation(Barebones.Networking.IIncommingMessage)">
            <summary>
            Handles e-mail confirmation request
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Barebones.MasterServer.AuthModule.HandlePasswordResetRequest(Barebones.Networking.IIncommingMessage)">
            <summary>
            Handles password reset request
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Barebones.MasterServer.AuthModule.HandleRegister(Barebones.Networking.IIncommingMessage)">
            <summary>
            Handles account registration request
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Barebones.MasterServer.AuthModule.HandleGetPeerAccountInfo(Barebones.Networking.IIncommingMessage)">
            <summary>
            Handles a request to retrieve account information
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Barebones.MasterServer.AuthModule.HandleLogIn(Barebones.Networking.IIncommingMessage)">
            <summary>
            Handles a request to log in
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Barebones.MasterServer.IAccountData">
            <summary>
                Represents account data
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.IAuthDatabase.CreateAccountObject">
            <summary>
                Should create an empty object with account data.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Barebones.MasterServer.IUserExtension">
            <summary>
            This is an interface of a user extension.
            Implementation of this interface will be stored in peer's extensions
            after he logs in
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfAuthClient.Register(System.Collections.Generic.Dictionary{System.String,System.String},Barebones.MasterServer.SuccessCallback)">
            <summary>
            Sends a registration request to server
            </summary>
            <param name="data"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfAuthClient.Register(System.Collections.Generic.Dictionary{System.String,System.String},Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a registration request to given connection
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfAuthClient.LogOut">
            <summary>
                Initiates a log out. In the process, disconnects and connects
                back to the server to ensure no state data is left on the server.
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfAuthClient.LogOut(Barebones.Networking.IClientSocket)">
            <summary>
                Initiates a log out. In the process, disconnects and connects
                back to the server to ensure no state data is left on the server.
            </summary>
            
        </member>
        <member name="M:Barebones.MasterServer.MsfAuthClient.LogInAsGuest(Barebones.MasterServer.MsfAuthClient.LoginCallback)">
            <summary>
            Sends a request to server, to log in as a guest
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfAuthClient.LogInAsGuest(Barebones.MasterServer.MsfAuthClient.LoginCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to server, to log in as a guest
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfAuthClient.LogIn(System.String,System.String,Barebones.MasterServer.MsfAuthClient.LoginCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a login request, using given credentials
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfAuthClient.LogIn(System.String,System.String,Barebones.MasterServer.MsfAuthClient.LoginCallback)">
            <summary>
            Sends a login request, using given credentials
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfAuthClient.LogIn(System.Collections.Generic.Dictionary{System.String,System.String},Barebones.MasterServer.MsfAuthClient.LoginCallback)">
            <summary>
            Sends a generic login request
            </summary>
            <param name="data"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfAuthClient.LogIn(System.Collections.Generic.Dictionary{System.String,System.String},Barebones.MasterServer.MsfAuthClient.LoginCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a generic login request
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfAuthClient.ConfirmEmail(System.String,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Sends an e-mail confirmation code to the server
            </summary>
            <param name="code"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfAuthClient.ConfirmEmail(System.String,Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends an e-mail confirmation code to the server
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfAuthClient.RequestEmailConfirmationCode(Barebones.MasterServer.SuccessCallback)">
            <summary>
            Sends a request to server, to ask for an e-mail confirmation code
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfAuthClient.RequestEmailConfirmationCode(Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to server, to ask for an e-mail confirmation code
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfAuthClient.RequestPasswordReset(System.String,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Sends a request to server, to ask for a password reset
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfAuthClient.RequestPasswordReset(System.String,Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to server, to ask for a password reset
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfAuthClient.ChangePassword(Barebones.MasterServer.PasswordChangeData,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Sends a new password to server
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfAuthClient.ChangePassword(Barebones.MasterServer.PasswordChangeData,Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a new password to server
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfAuthServer.GetPeerAccountInfo(System.Int32,Barebones.MasterServer.MsfAuthServer.PeerAccountInfoCallback)">
            <summary>
            Gets account information of a client, who is connected to master server, 
            and who's peer id matches the one provided
            </summary>
            <param name="peerId"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfAuthServer.GetPeerAccountInfo(System.Int32,Barebones.MasterServer.MsfAuthServer.PeerAccountInfoCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Gets account information of a client, who is connected to master server, 
            and who's peer id matches the one provided
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.UserExtension">
            <summary>
            Instance of this class will be added to 
            extensions of a peer who has logged in 
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.ChatChannel.AddUser(Barebones.MasterServer.ChatUserExtension)">
            <summary>
            Returns true, if user successfully joined a channel
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.ChatChannel.OnUserDisconnect(Barebones.Networking.IPeer)">
            <summary>
            Invoked, when user, who is connected to this channel, leaves
            </summary>
            <param name="peer"></param>
        </member>
        <member name="M:Barebones.MasterServer.ChatChannel.BroadcastMessage(Barebones.MasterServer.ChatMessagePacket)">
            <summary>
            Handle messages
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.ChatModule.ForbiddenWordsInChNames">
            <summary>
            List of words, chat should not appear in chat names
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.ChatModule.GetOrCreateChannel(System.String,System.Boolean)">
            <summary>
            Retrieves an existing channel or creates a new one.
            If <see cref="!:ignoreForbidden"/> value is set to false,
            before creating a channel, a check will be executed to make sure that
            no forbidden words are used in the name
            </summary>
            <param name="channelName"></param>
            <param name="ignoreForbidden"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.ChatModule.ChangeUsername(Barebones.Networking.IPeer,System.String,System.Boolean)">
            <summary>
            Removes existing chat user from all the channels, and creates a new 
            <see cref="T:Barebones.MasterServer.ChatUserExtension"/> with new username. If <see cref="!:joinSameChannels"/> is true, 
            user will be added to same channels
            </summary>
            <param name="peer"></param>
            <param name="newUsername"></param>
            <param name="joinSameChannels"></param>
        </member>
        <member name="M:Barebones.MasterServer.ChatModule.OnChatMessageReceived(Barebones.MasterServer.ChatMessagePacket,Barebones.MasterServer.ChatUserExtension,Barebones.Networking.IIncommingMessage)">
            <summary>
            Handles chat message.
            Returns true, if message was handled
            If it returns false, message sender will receive a "Not Handled" response.
            </summary>
        </member>
        <member name="E:Barebones.MasterServer.MsfChatClient.UserLeftChannel">
            <summary>
            Invoked, when user leaves a channel
            </summary>
        </member>
        <member name="E:Barebones.MasterServer.MsfChatClient.UserJoinedChannel">
            <summary>
            Invoked, when user joins a channel
            </summary>
        </member>
        <member name="E:Barebones.MasterServer.MsfChatClient.MessageReceived">
            <summary>
            Invoked, when a new message is received
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfChatClient.PickUsername(System.String,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Sends a request to set chat username
            </summary>
            <param name="username"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfChatClient.PickUsername(System.String,Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to set chat username
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfChatClient.JoinChannel(System.String,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Sends a request to join a specified channel
            </summary>
            <param name="channel"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfChatClient.JoinChannel(System.String,Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to join a specified channel
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfChatClient.LeaveChannel(System.String,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Sends a request to leave a specified channel
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfChatClient.LeaveChannel(System.String,Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to leave a specified channel
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfChatClient.SetDefaultChannel(System.String,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Sets a default channel to the specified channel.
            Messages, that have no channel, will be sent to default channel
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfChatClient.SetDefaultChannel(System.String,Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sets a default channel to the specified channel.
            Messages, that have no channel, will be sent to default channel
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfChatClient.GetMyChannels(Barebones.MasterServer.MsfChatClient.ChatChannelsCallback)">
            <summary>
            Retrieves a list of channels, which user has joined
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfChatClient.GetMyChannels(Barebones.MasterServer.MsfChatClient.ChatChannelsCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Retrieves a list of channels, which user has joined
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfChatClient.GetUsersInChannel(System.String,Barebones.MasterServer.MsfChatClient.ChatUsersCallback)">
            <summary>
            Retrieves a list users in a channel
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfChatClient.GetUsersInChannel(System.String,Barebones.MasterServer.MsfChatClient.ChatUsersCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Retrieves a list of users in a channel
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfChatClient.SendToDefaultChannel(System.String,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Sends a message to default channel
            </summary>
            <param name="message"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfChatClient.SendChannelMessage(System.String,System.String,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Sends a message to specified channel
            </summary>
            <param name="channel"></param>
            <param name="message"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfChatClient.SendPrivateMessage(System.String,System.String,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Sends a private message to specified user
            </summary>
            <param name="receiver"></param>
            <param name="message"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfChatClient.SendMessage(Barebones.MasterServer.ChatMessagePacket,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Sends a generic message packet to server
            </summary>
            <param name="packet"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfChatClient.SendMessage(Barebones.MasterServer.ChatMessagePacket,Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a generic message packet to server
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.ChatMessagePacket.Receiver">
            <summary>
            Represents receiver username if it's a private message,
            or channel name, if channel message
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.StringPairPacket">
            <summary>
            Just a helpful packet to have
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.DemoLobbyFactories">
            <summary>
            This list contains a number of lobby factory methods,
            used for demonstration purposes
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.DemoLobbyFactories.OneVsOne(Barebones.MasterServer.LobbiesModule,System.Collections.Generic.Dictionary{System.String,System.String},Barebones.Networking.IPeer)">
            <summary>
            Creates a game lobby for 1 vs 1 game
            </summary>
            <param name="module"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.DemoLobbyFactories.Deathmatch(Barebones.MasterServer.LobbiesModule,System.Collections.Generic.Dictionary{System.String,System.String},Barebones.Networking.IPeer)">
            <summary>
            Creates a lobby for a deathmatch game with 10 players
            </summary>
            <param name="module"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.DemoLobbyFactories.TwoVsTwoVsFour(Barebones.MasterServer.LobbiesModule,System.Collections.Generic.Dictionary{System.String,System.String},Barebones.Networking.IPeer)">
            <summary>
            Creates a game for two vs two vs four. This example shows
            how you can setup different size teams, and add them different constraints.
            </summary>
            <param name="module"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.DemoLobbyFactories.ThreeVsThreeQueue(Barebones.MasterServer.LobbiesModule,System.Collections.Generic.Dictionary{System.String,System.String},Barebones.Networking.IPeer)">
            <summary>
            Creates a 3 vs 3 lobby, instead of the regular <see cref="!:GameLobby"/>,
            it uses the <see cref="!:GameLobbyAuto"/>, which demonstrates how you 
            can extend game lobby functionality
            </summary>
            <param name="module"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.ILobbyListener.Initialize(Barebones.MasterServer.JoinedLobby)">
            <summary>
            Called, when listener is added to joined lobby
            </summary>
            <param name="lobby"></param>
        </member>
        <member name="M:Barebones.MasterServer.ILobbyListener.OnMemberPropertyChanged(Barebones.MasterServer.LobbyMemberData,System.String,System.String)">
            <summary>
            Called, when one of the lobby members property changes
            </summary>
            <param name="member"></param>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Barebones.MasterServer.ILobbyListener.OnMemberJoined(Barebones.MasterServer.LobbyMemberData)">
            <summary>
            Called, when a new member joins the lobby
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:Barebones.MasterServer.ILobbyListener.OnMemberLeft(Barebones.MasterServer.LobbyMemberData)">
            <summary>
            Called, when one of the members leaves a lobby
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:Barebones.MasterServer.ILobbyListener.OnLobbyLeft">
            <summary>
            Called, when "you" leave a lobby
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.ILobbyListener.OnChatMessageReceived(Barebones.MasterServer.LobbyChatPacket)">
            <summary>
            Called, when chat message is received
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:Barebones.MasterServer.ILobbyListener.OnLobbyPropertyChanged(System.String,System.String)">
            <summary>
            Called, when one of the lobby properties changes
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Barebones.MasterServer.ILobbyListener.OnMasterChanged(System.String)">
            <summary>
            Called, when game master of the lobby changes
            </summary>
            <param name="masterUsername"></param>
        </member>
        <member name="M:Barebones.MasterServer.ILobbyListener.OnMemberReadyStatusChanged(Barebones.MasterServer.LobbyMemberData,System.Boolean)">
            <summary>
            Called, when on the member's ready status changes
            </summary>
            <param name="member"></param>
            <param name="isReady"></param>
        </member>
        <member name="M:Barebones.MasterServer.ILobbyListener.OnMemberTeamChanged(Barebones.MasterServer.LobbyMemberData,Barebones.MasterServer.LobbyTeamData)">
            <summary>
            Called, when one of the members changes a team
            </summary>
            <param name="member"></param>
            <param name="team"></param>
        </member>
        <member name="M:Barebones.MasterServer.ILobbyListener.OnLobbyStatusTextChanged(System.String)">
            <summary>
            Called, when lobby status text changes
            </summary>
            <param name="statusText"></param>
        </member>
        <member name="M:Barebones.MasterServer.ILobbyListener.OnLobbyStateChange(Barebones.MasterServer.LobbyState)">
            <summary>
            Called, when lobby state changes
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Barebones.MasterServer.BaseLobby.TryGetUsername(Barebones.Networking.IPeer)">
            <summary>
            Extracts username of the peer.
            By default, uses user extension <see cref="T:Barebones.MasterServer.IUserExtension"/>
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.BaseLobby.IsPlayerAllowed(System.String,Barebones.MasterServer.LobbyUserExtension)">
            <summary>
            This will be called before adding a player to lobby.
            Override it to add custom checks for bans and etc.
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.BaseLobby.OnPeerDisconnected(Barebones.Networking.IPeer)">
            <summary>
            Invoked when one of the members disconnects
            </summary>
            <param name="session"></param>
        </member>
        <member name="T:Barebones.MasterServer.JoinedLobby">
            <summary>
            Represents a joined lobby. When player joins a lobby,
            an instance of this class is created. It acts as a convenient way
            to manage lobby state from player perspective
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.JoinedLobby.Leave">
            <summary>
            Leaves this lobby
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.JoinedLobby.Leave(System.Action)">
            <summary>
            Leaves this lobby
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.JoinedLobby.SetLobbyProperty(System.String,System.String)">
            <summary>
            Sets a lobby property to a specified value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Barebones.MasterServer.JoinedLobby.SetLobbyProperty(System.String,System.String,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Sets a lobby property to a specified value
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.JoinedLobby.SetLobbyProperties(System.Collections.Generic.Dictionary{System.String,System.String},Barebones.MasterServer.SuccessCallback)">
            <summary>
            Sets a lobby properties to values, provided within a dictionary
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.JoinedLobby.SetMyProperty(System.String,System.String)">
            <summary>
            Sets current player's properties
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Barebones.MasterServer.JoinedLobby.SetMyProperty(System.String,System.String,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Set's current player's properties
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.JoinedLobby.SetMyProperties(System.Collections.Generic.Dictionary{System.String,System.String},Barebones.MasterServer.SuccessCallback)">
            <summary>
            Set's current player's properties
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.JoinedLobby.SetReadyStatus(System.Boolean)">
            <summary>
            Set's current player's ready status
            </summary>
            <param name="isReady"></param>
        </member>
        <member name="M:Barebones.MasterServer.JoinedLobby.SetReadyStatus(System.Boolean,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Set's current player's ready status
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.JoinedLobby.SetListener(Barebones.MasterServer.ILobbyListener)">
            <summary>
            Set's a lobby event listener
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:Barebones.MasterServer.JoinedLobby.SendChatMessage(System.String)">
            <summary>
            Send's a lobby chat message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Barebones.MasterServer.JoinedLobby.JoinTeam(System.String,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Switches current user to another team (if available)
            </summary>
            <param name="teamName"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.JoinedLobby.StartGame(Barebones.MasterServer.SuccessCallback)">
            <summary>
            Sends a request to server to start a match
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.JoinedLobby.GetLobbyRoomAccess(Barebones.MasterServer.RoomAccessCallback)">
            <summary>
            Retrieves an access to room, which is assigned to this lobby
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.JoinedLobby.GetLobbyRoomAccess(System.Collections.Generic.Dictionary{System.String,System.String},Barebones.MasterServer.RoomAccessCallback)">
            <summary>
            Retrieves an access to room, which is assigned to this lobby
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.LobbiesModule.OnLobbyDestroyed(Barebones.MasterServer.ILobby)">
            <summary>
            Invoked, when lobby is destroyed
            </summary>
            <param name="lobby"></param>
        </member>
        <member name="M:Barebones.MasterServer.LobbiesModule.HandleJoinLobby(Barebones.Networking.IIncommingMessage)">
            <summary>
            Handles a request from user to join a lobby
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Barebones.MasterServer.LobbiesModule.HandleLeaveLobby(Barebones.Networking.IIncommingMessage)">
            <summary>
            Handles a request from user to leave a lobby
            </summary>
            <param name="message"></param>
        </member>
        <member name="F:Barebones.MasterServer.LobbyConfig.EnableTeamSwitching">
            <summary>
            If true, players will be able to switch teams
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.LobbyConfig.PlayAgainEnabled">
            <summary>
            If true, after the game is over, lobby will be
            set to preparation state, and players will be able to start the game again
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.LobbyConfig.EnableReadySystem">
            <summary>
            If true, players will be able to set whether they're ready
            to play or not.
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.LobbyConfig.AllowJoiningWhenGameIsLive">
            <summary>
            If ture, players will be allowed to join lobby when
            game is live (game server is running)
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.LobbyConfig.EnableGameMasters">
            <summary>
            If true, lobby will have a game master, otherwise
            no player will be assigned as a master
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.LobbyConfig.StartGameWhenAllReady">
            <summary>
            If true, game server will start automatically when all players are ready
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.LobbyConfig.EnableManualStart">
            <summary>
            If true, game master will be able to start game
            manually
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.LobbyFactoryAnonymous">
            <summary>
            Lobby factory implementation, which simply invokes
            an anonymous method
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.LobbyMember.Properties">
            <summary>
            Player's properties
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.LobbyMember.IsReady">
            <summary>
            True, if member is ready to play
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.LobbyMember.Team">
            <summary>
            A lobby team, to which this member belongs
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.LobbyMember.SetProperty(System.String,System.String)">
            <summary>
            Changes property value of the player
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Barebones.MasterServer.LobbyMember.GetProperty(System.String)">
            <summary>
            Retrieves a property value of current member
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.LobbyMember.GenerateDataPacket">
            <summary>
            Creates a lobby member data packet
            </summary>
            <returns></returns>
        </member>
        <member name="T:Barebones.MasterServer.LobbyState">
            <summary>
            Represents the current state of the lobby
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.LobbyTeam.Members">
            <summary>
            Members of the team
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.LobbyTeam.Properties">
            <summary>
            Team properties
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.LobbyTeam.MinPlayers">
            <summary>
            Min number of players, required in this team
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.LobbyTeam.MaxPlayers">
            <summary>
            How many players can join this team
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.LobbyTeam.PlayerCount">
            <summary>
            Returns a number of members in this team
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.LobbyTeam.CanAddPlayer(Barebones.MasterServer.LobbyMember)">
            <summary>
            Checks if a specific member can be added to the lobby
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.LobbyTeam.AddMember(Barebones.MasterServer.LobbyMember)">
            <summary>
            Adds a member to the lobby
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.LobbyTeam.RemoveMember(Barebones.MasterServer.LobbyMember)">
            <summary>
            Removes a member from the lobby
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:Barebones.MasterServer.LobbyTeam.SetProperty(System.String,System.String)">
            <summary>
            Sets lobby property to a specified value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Barebones.MasterServer.LobbyTeam.GetTeamProperties">
            <summary>
            Returns a MUTABLE dictionary of properties
            </summary>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.LobbyTeam.GenerateData">
            <summary>
            Generates a lobby data packet
            </summary>
            <returns></returns>
        </member>
        <member name="P:Barebones.MasterServer.LobbyUserExtension.CurrentLobby">
            <summary>
            Lobby, to which current peer belongs
            </summary>
        </member>
        <member name="E:Barebones.MasterServer.MsfLobbiesClient.LobbyJoined">
            <summary>
            Invoked, when user joins a lobby
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.MsfLobbiesClient._joinedLobbies">
            <summary>
            Key is in format 'lobbyId:connectionPeerId' - this is to allow
            mocking multiple clients on the same client and same lobby
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.MsfLobbiesClient.LastJoinedLobby">
            <summary>
            Instance of a lobby that was joined the last
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesClient.CreateAndJoin(System.String,System.Collections.Generic.Dictionary{System.String,System.String},Barebones.MasterServer.MsfLobbiesClient.JoinLobbyCallback)">
            <summary>
            Sends a request to create a lobby and joins it
            </summary>
            <param name="factory"></param>
            <param name="properties"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesClient.CreateAndJoin(System.String,System.Collections.Generic.Dictionary{System.String,System.String},Barebones.MasterServer.MsfLobbiesClient.JoinLobbyCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to create a lobby and joins it
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesClient.CreateLobby(System.String,System.Collections.Generic.Dictionary{System.String,System.String},Barebones.MasterServer.MsfLobbiesClient.CreateLobbyCallback)">
            <summary>
            Sends a request to create a lobby, using a specified factory
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesClient.CreateLobby(System.String,System.Collections.Generic.Dictionary{System.String,System.String},Barebones.MasterServer.MsfLobbiesClient.CreateLobbyCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to create a lobby, using a specified factory
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesClient.JoinLobby(System.Int32,Barebones.MasterServer.MsfLobbiesClient.JoinLobbyCallback)">
            <summary>
            Sends a request to join a lobby
            </summary>
            <param name="lobbyId"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesClient.JoinLobby(System.Int32,Barebones.MasterServer.MsfLobbiesClient.JoinLobbyCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to join a lobby
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesClient.LeaveLobby(System.Int32)">
            <summary>
            Sends a request to leave a lobby
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesClient.LeaveLobby(System.Int32,System.Action)">
            <summary>
            Sends a request to leave a lobby
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesClient.LeaveLobby(System.Int32,System.Action,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to leave a lobby
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesClient.SetReadyStatus(System.Boolean,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Sets a ready status of current player
            </summary>
            <param name="isReady"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesClient.SetReadyStatus(System.Boolean,Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sets a ready status of current player
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesClient.SetLobbyProperties(System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},Barebones.MasterServer.SuccessCallback)">
            <summary>
            Sets lobby properties of a specified lobby id
            </summary>
            <param name="lobbyId"></param>
            <param name="properties"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesClient.SetLobbyProperties(System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sets lobby properties of a specified lobby id
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesClient.SetMyProperties(System.Collections.Generic.Dictionary{System.String,System.String},Barebones.MasterServer.SuccessCallback)">
            <summary>
            Set's lobby user properties (current player sets his own properties,
             which can be accessed by game server and etc.)
            </summary>
            <param name="properties"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesClient.SetMyProperties(System.Collections.Generic.Dictionary{System.String,System.String},Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Set's lobby user properties (current player sets his own properties,
             which can be accessed by game server and etc.)
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesClient.JoinTeam(System.Int32,System.String,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Current player sends a request to join a team
            </summary>
            <param name="lobbyId"></param>
            <param name="teamName"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesClient.JoinTeam(System.Int32,System.String,Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Current player sends a request to join a team
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesClient.SendChatMessage(System.String)">
            <summary>
            Current player sends a chat message to lobby
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesClient.SendChatMessage(System.String,Barebones.Networking.IClientSocket)">
            <summary>
            Current player sends a chat message to lobby
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesClient.StartGame(Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to start a game
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesClient.GetLobbyRoomAccess(System.Collections.Generic.Dictionary{System.String,System.String},Barebones.MasterServer.RoomAccessCallback)">
            <summary>
            Sends a request to get access to room, which is assigned to this lobby
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesClient.GetLobbyRoomAccess(System.Collections.Generic.Dictionary{System.String,System.String},Barebones.MasterServer.RoomAccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to get access to room, which is assigned to this lobby
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesServer.GetMemberData(System.Int32,System.Int32,Barebones.MasterServer.MsfLobbiesServer.LobbyMemberDataCallback)">
            <summary>
            Retrieves lobby member data of user, who has connected to master server with
            a specified peerId
            </summary>
            <param name="lobbyId"></param>
            <param name="peerId"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesServer.GetMemberData(System.Int32,System.Int32,Barebones.MasterServer.MsfLobbiesServer.LobbyMemberDataCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Retrieves lobby member data of user, who has connected to master server with
            a specified peerId
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesServer.GetLobbyInfo(System.Int32,Barebones.MasterServer.MsfLobbiesServer.LobbyInfoCallback)">
            <summary>
            Retrieves information about the lobby
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfLobbiesServer.GetLobbyInfo(System.Int32,Barebones.MasterServer.MsfLobbiesServer.LobbyInfoCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Retrieves information about the lobby
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.LobbyChatPacket">
            <summary>
            A lobby chat message 
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.LobbyDataPacket">
            <summary>
            This package represents current state of the lobby
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.LobbyMemberData">
            <summary>
            Information about a member of the lobby
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.LobbyMemberPropChangePacket">
            <summary>
            RegistrationPacket, containing data about which player changed which property
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.LobbyPropertyData">
            <summary>
            Data about a specific lobby property
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.LobbyPropertyData.Type">
            <summary>
            Type of the property. Should be useful if you're making controls
            for different types of inputs (radio buttons, drop downs, text fields and etc.)
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.LobbyPropertyData.Label">
            <summary>
            Label of the property
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.LobbyPropertyData.PropertyKey">
            <summary>
            Key of the exact property
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.LobbyPropertyData.Options">
            <summary>
            List of property options (useful for dropdowns)
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfMatchmakerClient.FindGames(Barebones.MasterServer.FindGamesCallback)">
            <summary>
            Retrieves a list of all public games
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfMatchmakerClient.FindGames(System.Collections.Generic.Dictionary{System.String,System.String},Barebones.MasterServer.FindGamesCallback)">
            <summary>
            Retrieves a list of public games, which pass a provided filter.
            (You can implement your own filtering by extending modules or "classes" 
            that implement <see cref="T:Barebones.MasterServer.IGamesProvider"/>)
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfMatchmakerClient.FindGames(System.Collections.Generic.Dictionary{System.String,System.String},Barebones.MasterServer.FindGamesCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Retrieves a list of public games, which pass a provided filter.
            (You can implement your own filtering by extending modules or "classes" 
            that implement <see cref="T:Barebones.MasterServer.IGamesProvider"/>)
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.IObservableProperty">
            <summary>
            Represents basic functionality of observable property
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.IObservableProperty.Key">
            <summary>
            Property key
            </summary>
        </member>
        <member name="E:Barebones.MasterServer.IObservableProperty.OnDirty">
            <summary>
            Invoked, when value gets dirty
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.IObservableProperty.ToBytes">
            <summary>
            Should serialize the whole value to bytes
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.IObservableProperty.FromBytes(System.Byte[])">
            <summary>
            Should deserialize value from bytes. 
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Barebones.MasterServer.IObservableProperty.SerializeToString">
            <summary>
            Should serialize a value to string
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.IObservableProperty.DeserializeFromString(System.String)">
            <summary>
            Should deserialize a value from string
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.IObservableProperty.GetUpdates">
            <summary>
            Retrieves updates that happened from the last time
            this method was called. If no updates happened - returns null;
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.IObservableProperty.ApplyUpdates(System.Byte[])">
            <summary>
            Updates value according to given data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Barebones.MasterServer.IObservableProperty.ClearUpdates">
            <summary>
            Clears information about accumulated updates.
            This is called after property changes are broadcasted to listeners
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.IProfilesDatabase">
            <summary>
            Represents generic database for profiles
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.IProfilesDatabase.RestoreProfile(Barebones.MasterServer.ObservableServerProfile)">
            <summary>
            Should restore all values of the given profile, 
            or not change them, if there's no entry in the database
            </summary>
            <param name="profile"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.IProfilesDatabase.UpdateProfile(Barebones.MasterServer.ObservableServerProfile)">
            <summary>
            Should save updated profile into database
            </summary>
            <param name="profile"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfProfilesClient.GetProfileValues(Barebones.MasterServer.ObservableProfile,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Sends a request to server, retrieves all profile values, and applies them to a provided
            profile
            </summary>
            <param name="profile"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfProfilesClient.GetProfileValues(Barebones.MasterServer.ObservableProfile,Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to server, retrieves all profile values, and applies them to a provided
            profile
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.MsfProfilesServer.ProfileUpdatesInterval">
            <summary>
            Time, after which game server will try sending profile 
            updates to master server
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfProfilesServer.FillProfileValues(Barebones.MasterServer.ObservableServerProfile,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Sends a request to server, retrieves all profile values, and applies them to a provided
            profile
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfProfilesServer.FillProfileValues(Barebones.MasterServer.ObservableServerProfile,Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to server, retrieves all profile values, and applies them to a provided
            profile
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.ObservableBase">
            <summary>
            Base observable value class, which should help out with some things
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.ObservableBase.Key">
            <summary>
            Property key
            </summary>
        </member>
        <member name="E:Barebones.MasterServer.ObservableBase.OnDirty">
            <summary>
            Invoked, when value gets dirty
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.ObservableBase.MarkDirty">
            <summary>
            Sets current observable as dirty
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.ObservableBase.ToBytes">
            <summary>
            Should serialize the whole value to bytes
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.ObservableBase.FromBytes(System.Byte[])">
            <summary>
            Should deserialize value from bytes. 
            This is not necessarily the whole value. It might be a small update
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Barebones.MasterServer.ObservableBase.SerializeToString">
            <summary>
            Should serialize a value to string
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.ObservableBase.DeserializeFromString(System.String)">
            <summary>
            Should deserialize a value from string
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.ObservableBase.GetUpdates">
            <summary>
            Retrieves updates that happened from the last time
            this method was called. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.ObservableBase.ApplyUpdates(System.Byte[])">
            <summary>
            Updates value according to given data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Barebones.MasterServer.ObservableBase.ClearUpdates">
            <summary>
            Clears information about accumulated updates.
            This is called after property changes are broadcasted to listeners
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.ObservableDictionary.Values">
            <summary>
            Returns an immutable list of values
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.ObservableDictionary.Pairs">
            <summary>
            Returns an immutable list of key-value pairs
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.ObservableDictionary.UnderlyingDictionary">
            <summary>
            Returns a mutable dictionary
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.ObservableDictionaryInt.Values">
            <summary>
            Returns an immutable list of values
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.ObservableDictionaryInt.Pairs">
            <summary>
            Returns an immutable list of key-value pairs
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.ObservableDictionaryInt.UnderlyingDictionary">
            <summary>
            Returns a mutable dictionary
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.ObservableDictStringFloat.Values">
            <summary>
            Returns an immutable list of values
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.ObservableDictStringFloat.Pairs">
            <summary>
            Returns an immutable list of key-value pairs
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.ObservableDictStringFloat.UnderlyingDictionary">
            <summary>
            Returns a mutable dictionary
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.ObservableDictStringInt.Values">
            <summary>
            Returns an immutable list of values
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.ObservableDictStringInt.Pairs">
            <summary>
            Returns an immutable list of key-value pairs
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.ObservableDictStringInt.UnderlyingDictionary">
            <summary>
            Returns a mutable dictionary
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.ObservableFloat">
            <summary>
            Observable integer
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.ObservableInt">
            <summary>
            Observable integer
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.ObservableProfile">
            <summary>
            Represents clients profile, which emits events about changes.
            Client, game server and master servers will create a similar
            object.
            </summary>
        </member>
        <member name="E:Barebones.MasterServer.ObservableProfile.PropertyUpdated">
            <summary>
            Invoked, when one of the values changes
            </summary>
        </member>
        <member name="E:Barebones.MasterServer.ObservableProfile.Modified">
            <summary>
            Invoked, when something in the profile changes
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.ObservableProfile.GetProperty``1(System.Int16)">
            <summary>
            Returns an observable value of given type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.ObservableProfile.GetProperty(System.Int16)">
            <summary>
            Returns an observable value
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.ObservableProfile.AddProperty(Barebones.MasterServer.IObservableProperty)">
            <summary>
            Adds a value to profile
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Barebones.MasterServer.ObservableProfile.OnDirtyProperty(Barebones.MasterServer.IObservableProperty)">
            <summary>
            Called, when a value becomes dirty
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Barebones.MasterServer.ObservableProfile.ToBytes">
            <summary>
            Writes all data from profile to buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.ObservableProfile.FromBytes(System.Byte[])">
            <summary>
            Restores profile from data in the buffer
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.ObservableProfile.FromStrings(System.Collections.Generic.Dictionary{System.Int16,System.String})">
            <summary>
            Restores profile from dictionary of strings
            </summary>
            <param name="dataData"></param>
        </member>
        <member name="M:Barebones.MasterServer.ObservableProfile.GetUpdates">
            <summary>
            Returns observable properties changes, writen to
            byte array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.ObservableProfile.GetUpdates(Barebones.Networking.EndianBinaryWriter)">
            <summary>
            Writes changes into the writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Barebones.MasterServer.ObservableProfile.ApplyUpdates(System.Byte[])">
            <summary>
            Uses updates data to update values in the profile
            </summary>
            <param name="updates"></param>
        </member>
        <member name="M:Barebones.MasterServer.ObservableProfile.ApplyUpdates(Barebones.Networking.EndianBinaryReader)">
            <summary>
            Use updates data to update values in the profile
            </summary>
            <param name="updates"></param>
        </member>
        <member name="M:Barebones.MasterServer.ObservableProfile.ToStringsDictionary">
            <summary>
            Serializes all of the properties to short/string dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="T:Barebones.MasterServer.ObservableServerProfile">
            <summary>
            Represents clients profile, which emits events about changes.
            Client, game server and master servers will create a similar
            object.
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.ObservableServerProfile.Username">
            <summary>
            Username of the client, who's profile this is
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.ObservableString">
            <summary>
            Observable property of type string
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.ProfilesModule">
            <summary>
            Handles player profiles within master server.
            Listens to changes in player profiles, and sends updates to
            clients of interest.
            Also, reads changes from game server, and applies them to players profile
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.ProfilesModule.UnloadProfileAfter">
            <summary>
            Time to pass after logging out, until profile
            will be removed from the lookup. Should be enough for game
            server to submit last changes
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.ProfilesModule.SaveProfileInterval">
            <summary>
            Interval, in which updated profiles will be saved to database
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.ProfilesModule.ClientUpdateInterval">
            <summary>
            Interval, in which profile updates will be sent to clients
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.ProfilesModule.ProfileFactory">
            <summary>
            By default, profiles module will use this factory to create a profile for users.
            If you're using profiles, you will need to change this factory to construct the
            structure of a profile.
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.ProfilesModule.OnLoggedIn(Barebones.MasterServer.IUserExtension)">
            <summary>
            Invoked, when user logs into the master server
            </summary>
            <param name="session"></param>
            <param name="accountData"></param>
        </member>
        <member name="M:Barebones.MasterServer.ProfilesModule.CreateProfile(System.String,Barebones.Networking.IPeer)">
            <summary>
            Creates an observable profile for a client.
            Override this, if you want to customize the profile creation
            </summary>
            <param name="username"></param>
            <param name="clientPeer"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.ProfilesModule.OnProfileChanged(Barebones.MasterServer.ObservableServerProfile)">
            <summary>
            Invoked, when profile is changed
            </summary>
            <param name="profile"></param>
        </member>
        <member name="M:Barebones.MasterServer.ProfilesModule.OnPeerPlayerDisconnected(Barebones.Networking.IPeer)">
            <summary>
            Invoked, when user logs out (disconnects from master)
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:Barebones.MasterServer.ProfilesModule.SaveProfile(Barebones.MasterServer.ObservableServerProfile,System.Single)">
            <summary>
            Saves a profile into database after delay
            </summary>
            <param name="profile"></param>
            <param name="delay"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.ProfilesModule.SendUpdatesToClient(Barebones.MasterServer.ObservableServerProfile,System.Single)">
            <summary>
            Collets changes in the profile, and sends them to client after delay
            </summary>
            <param name="profile"></param>
            <param name="delay"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.ProfilesModule.UnloadProfile(System.String,System.Single)">
            <summary>
            Coroutine, which unloads profile after a period of time
            </summary>
            <param name="username"></param>
            <param name="delay"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.ProfilesModule.HandleProfileUpdates(Barebones.Networking.IIncommingMessage)">
            <summary>
            Handles a message from game server, which includes player profiles updates
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Barebones.MasterServer.ProfilesModule.HandleClientProfileRequest(Barebones.Networking.IIncommingMessage)">
            <summary>
            Handles a request from client to get profile
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Barebones.MasterServer.ProfilesModule.HandleGameServerProfileRequest(Barebones.Networking.IIncommingMessage)">
            <summary>
            Handles a request from game server to get a profile
            </summary>
            <param name="message"></param>
        </member>
        <member name="E:Barebones.MasterServer.MsfRoomsClient.AccessReceived">
            <summary>
            Event, invoked when an access is received
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.MsfRoomsClient.ForceClientMode">
            <summary>
            If set to true, game server will never be started
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.MsfRoomsClient.LastReceivedAccess">
            <summary>
            An access, which was last received
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfRoomsClient.GetAccess(System.Int32,Barebones.MasterServer.RoomAccessCallback)">
            <summary>
            Tries to get an access to a room with a given room id
            </summary>
            <param name="roomId"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfRoomsClient.GetAccess(System.Int32,System.String,Barebones.MasterServer.RoomAccessCallback)">
            <summary>
            Tries to get an access to a room with a given room id and password
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfRoomsClient.GetAccess(System.Int32,Barebones.MasterServer.RoomAccessCallback,System.String)">
            <summary>
            Tries to get an access to a room with a given room id and password
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfRoomsClient.GetAccess(System.Int32,Barebones.MasterServer.RoomAccessCallback,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Tries to get an access to a room with a given room id, password,
            and some other properties, which will be visible to the room (game server)
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfRoomsClient.GetAccess(System.Int32,Barebones.MasterServer.RoomAccessCallback,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Tries to get an access to a room with a given room id, password,
            and some other properties, which will be visible to the room (game server)
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfRoomsClient.GetAccess(System.Int32,Barebones.MasterServer.RoomAccessCallback,System.String,System.Collections.Generic.Dictionary{System.String,System.String},Barebones.Networking.IClientSocket)">
            <summary>
            Tries to get an access to a room with a given room id, password,
            and some other properties, which will be visible to the room (game server)
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfRoomsClient.TriggerAccessReceivedEvent(Barebones.MasterServer.RoomAccessPacket)">
            <summary>
            This method triggers the <see cref="E:Barebones.MasterServer.MsfRoomsClient.AccessReceived"/> event. Call this, 
            if you made some custom functionality to get access to rooms
            </summary>
            <param name="access"></param>
        </member>
        <member name="F:Barebones.MasterServer.MsfRoomsServer.AccessProviderTimeout">
            <summary>
            Maximum time the master server can wait for a response from game server
            to see if it can give access to a peer
            </summary>
        </member>
        <member name="E:Barebones.MasterServer.MsfRoomsServer.RoomRegistered">
            <summary>
            Event, invoked when a room is registered
            </summary>
        </member>
        <member name="E:Barebones.MasterServer.MsfRoomsServer.RoomDestroyed">
            <summary>
            Event, invoked when a room is destroyed
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfRoomsServer.RegisterRoom(Barebones.MasterServer.RoomCreationCallback)">
            <summary>
            Sends a request to register a room to the master server,
            uses default room options <see cref="T:Barebones.MasterServer.RoomOptions"/>
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfRoomsServer.RegisterRoom(Barebones.MasterServer.RoomOptions,Barebones.MasterServer.RoomCreationCallback)">
            <summary>
            Sends a request to register a room to master server
            </summary>
            <param name="options"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfRoomsServer.RegisterRoom(Barebones.MasterServer.RoomOptions,Barebones.MasterServer.RoomCreationCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to register a room to master server
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfRoomsServer.DestroyRoom(System.Int32,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Sends a request to destroy a room of a given room id
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfRoomsServer.DestroyRoom(System.Int32,Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to destroy a room of a given room id
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfRoomsServer.ValidateAccess(System.Int32,System.String,Barebones.MasterServer.RoomAccessValidateCallback)">
            <summary>
            Sends a request to master server, to see if a given token is valid
            </summary>
            <param name="roomId"></param>
            <param name="token"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfRoomsServer.ValidateAccess(System.Int32,System.String,Barebones.MasterServer.RoomAccessValidateCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to master server, to see if a given token is valid
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfRoomsServer.SaveOptions(System.Int32,Barebones.MasterServer.RoomOptions,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Updates the options of the registered room
            </summary>
            <param name="roomId"></param>
            <param name="options"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfRoomsServer.SaveOptions(System.Int32,Barebones.MasterServer.RoomOptions,Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Updates the options of the registered room
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfRoomsServer.NotifyPlayerLeft(System.Int32,System.Int32,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Notifies master server that a user with a given peer id has left the room
            </summary>
            <param name="roomId"></param>
            <param name="peerId"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfRoomsServer.NotifyPlayerLeft(System.Int32,System.Int32,Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Notifies master server that a user with a given peer id has left the room
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfRoomsServer.GetRoomController(System.Int32)">
            <summary>
            Get's a room controller (of a registered room, which was registered in current process)
            </summary>
            <param name="roomId"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.MsfRoomsServer.GetLocallyCreatedRooms">
            <summary>
            Retrieves all of the locally created rooms (their controllers)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Barebones.MasterServer.RegisteredRoom">
            <summary>
            This is an instance of the room in master server
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.RegisteredRoom.GetAccess(Barebones.Networking.IPeer,Barebones.MasterServer.RegisteredRoom.GetAccessCallback)">
            <summary>
            Sends a request to room, to retrieve an access to it for a specified peer
            </summary>
            <param name="peer"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.RegisteredRoom.GetAccess(Barebones.Networking.IPeer,System.Collections.Generic.Dictionary{System.String,System.String},Barebones.MasterServer.RegisteredRoom.GetAccessCallback)">
            <summary>
            Sends a request to room, to retrieve an access to it for a specified peer, 
            with some extra properties
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.RegisteredRoom.ValidateAccess(System.String,Barebones.Networking.IPeer@)">
            <summary>
            Checks if access token is valid
            </summary>
            <param name="token"></param>
            <param name="peer"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.RegisteredRoom.ClearTimedOutAccesses">
            <summary>
            Clears all of the accesses that have not been confirmed in time
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.RoomController">
            <summary>
            Instance of this class will be created when room registration is completed.
            It acts as a helpful way to manage a registered room.
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.RoomController.Destroy">
            <summary>
            Destroys and unregisters the room
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.RoomController.Destroy(Barebones.MasterServer.SuccessCallback)">
            <summary>
            Destroys and unregisters the room
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.RoomController.SaveOptions">
            <summary>
            Send's current options to master server
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.RoomController.SaveOptions(Barebones.MasterServer.RoomOptions)">
            <summary>
            Send's new options to master server
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.RoomController.SaveOptions(Barebones.MasterServer.RoomOptions,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Send's new options to master server
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.RoomController.SetAccessProvider(Barebones.MasterServer.RoomAccessProvider)">
            <summary>
            Call this, if you want to manually check if peer should receive an access
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Barebones.MasterServer.RoomController.ValidateAccess(System.String,Barebones.MasterServer.RoomAccessValidateCallback)">
            <summary>
            Sends the token to "master" server to see if it's valid. If it is -
            callback will be invoked with peer id of the user, whos access was confirmed.
            This peer id can be used to retrieve users data from master server
            </summary>
            <param name="token"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.RoomController.DefaultAccessProvider(Barebones.MasterServer.UsernameAndPeerIdPacket,Barebones.MasterServer.RoomAccessProviderCallback)">
            <summary>
            Default access provider, which always confirms access requests
            </summary>
            <param name="peerId"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.RoomController.MakePublic">
            <summary>
            Makes the room public
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.RoomController.MakePublic(System.Action)">
            <summary>
            Makes the room public
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.RoomOptions">
            <summary>
            List of options, which are sent to master server during registration
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.RoomOptions.Name">
            <summary>
            Name of the room
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.RoomOptions.RoomIp">
            <summary>
            IP of the machine on which the room was created
            (Only used in the <see cref="M:Barebones.MasterServer.RoomController.DefaultAccessProvider(Barebones.MasterServer.UsernameAndPeerIdPacket,Barebones.MasterServer.RoomAccessProviderCallback)"/>)
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.RoomOptions.RoomPort">
            <summary>
            Port, required to access the room 
            (Only used in the <see cref="M:Barebones.MasterServer.RoomController.DefaultAccessProvider(Barebones.MasterServer.UsernameAndPeerIdPacket,Barebones.MasterServer.RoomAccessProviderCallback)"/>)
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.RoomOptions.IsPublic">
            <summary>
            If true, room will appear in public listings
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.RoomOptions.MaxPlayers">
            <summary>
            If 0 - player number is not limited
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.RoomOptions.Password">
            <summary>
            Room password
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.RoomOptions.AccessTimeoutPeriod">
            <summary>
            Number of seconds, after which unconfirmed (pending) accesses will removed
            to allow new players. Make sure it's long enought to allow player to load gameplay scene
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.RoomOptions.AllowUsersRequestAccess">
            <summary>
            If set to false, users will no longer be able to request access directly.
            This is useful when you want players to get accesses through other means, for example
            through Lobby module,
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.RoomOptions.Properties">
            <summary>
            Extra properties that you might want to send to master server
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.RoomsModule.HasRoomRegistrationPermissions(Barebones.Networking.IPeer)">
            <summary>
            Returns true, if peer has permissions to register a game server
            </summary>
            <param name="peer"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.RoomsModule.RegisterRoom(Barebones.Networking.IPeer,Barebones.MasterServer.RoomOptions)">
            <summary>
            Registers a room to the server
            </summary>
            <param name="peer"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.RoomsModule.DestroyRoom(Barebones.MasterServer.RegisteredRoom)">
            <summary>
            Unregisters a room from a server
            </summary>
            <param name="room"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfSpawnersClient.RequestSpawn(System.Collections.Generic.Dictionary{System.String,System.String},System.String,Barebones.MasterServer.ClientSpawnRequestCallback)">
            <summary>
            Sends a request to master server, to spawn a process in a given region, and with given options
            </summary>
            <param name="options"></param>
            <param name="region"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfSpawnersClient.RequestSpawn(System.Collections.Generic.Dictionary{System.String,System.String},System.String,Barebones.MasterServer.ClientSpawnRequestCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to master server, to spawn a process in a given region, and with given options
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfSpawnersClient.AbortSpawn(System.Int32)">
            <summary>
            Sends a request to abort spawn request, which was not yet finalized
            </summary>
            <param name="spawnId"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfSpawnersClient.AbortSpawn(System.Int32,Barebones.MasterServer.MsfSpawnersClient.AbortSpawnHandler)">
            <summary>
            Sends a request to abort spawn request, which was not yet finalized
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfSpawnersClient.AbortSpawn(System.Int32,Barebones.MasterServer.MsfSpawnersClient.AbortSpawnHandler,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to abort spawn request, which was not yet finalized
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfSpawnersClient.GetFinalizationData(System.Int32,Barebones.MasterServer.MsfSpawnersClient.FinalizationDataHandler)">
            <summary>
            Retrieves data, which was given to master server by a spawned process,
            which was finalized
            </summary>
            <param name="spawnId"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfSpawnersClient.GetFinalizationData(System.Int32,Barebones.MasterServer.MsfSpawnersClient.FinalizationDataHandler,Barebones.Networking.IClientSocket)">
            <summary>
            Retrieves data, which was given to master server by a spawned process,
            which was finalized
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfSpawnersClient.GetRequestController(System.Int32)">
            <summary>
            Retrieves a specific spawn request controller
            </summary>
            <param name="spawnId"></param>
            <returns></returns>
        </member>
        <member name="P:Barebones.MasterServer.MsfSpawnersServer.IsSpawnedProccess">
            <summary>
            If true, this process is considered to be spawned by the spawner
            </summary>
        </member>
        <member name="E:Barebones.MasterServer.MsfSpawnersServer.SpawnerRegistered">
            <summary>
            Invoked on "spawner server", when it successfully registers to master server
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfSpawnersServer.RegisterSpawner(Barebones.MasterServer.SpawnerOptions,Barebones.MasterServer.RegisterSpawnerCallback)">
            <summary>
            Sends a request to master server, to register an existing spawner with given options
            </summary>
            <param name="options"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfSpawnersServer.RegisterSpawner(Barebones.MasterServer.SpawnerOptions,Barebones.MasterServer.RegisterSpawnerCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to master server, to register an existing spawner with given options
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfSpawnersServer.FinalizeSpawnedProcess(System.Int32,Barebones.MasterServer.CompleteSpawnedProcessCallback)">
            <summary>
            This method should be called, when spawn process is finalized (finished spawning).
            For example, when spawned game server fully starts
            </summary>
            <param name="spawnId"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfSpawnersServer.FinalizeSpawnedProcess(System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},Barebones.MasterServer.CompleteSpawnedProcessCallback)">
            <summary>
            This method should be called, when spawn process is finalized (finished spawning).
            For example, when spawned game server fully starts
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfSpawnersServer.FinalizeSpawnedProcess(System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},Barebones.MasterServer.CompleteSpawnedProcessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            This method should be called, when spawn process is finalized (finished spawning).
            For example, when spawned game server fully starts
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfSpawnersServer.RegisterSpawnedProcess(System.Int32,System.String,Barebones.MasterServer.RegisterSpawnedProcessCallback)">
            <summary>
            This should be called from a process, which is spawned.
            For example, it can be called from a game server, which is started by the spawner
            On successfull registration, callback contains <see cref="T:Barebones.MasterServer.SpawnTaskController"/>, which 
            has a dictionary of properties, that were given when requesting a process to be spawned
            </summary>
            <param name="spawnId"></param>
            <param name="spawnCode"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfSpawnersServer.RegisterSpawnedProcess(System.Int32,System.String,Barebones.MasterServer.RegisterSpawnedProcessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            This should be called from a process which is spawned.
            For example, it can be called from a game server, which is started by the spawner
            On successfull registration, callback contains <see cref="T:Barebones.MasterServer.SpawnTaskController"/>, which 
            has a dictionary of properties, that were given when requesting a process to be spawned
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfSpawnersServer.UpdateProcessesCount(System.Int32,System.Int32)">
            <summary>
            Notifies master server, how many processes are running on a specified spawner
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfSpawnersServer.UpdateProcessesCount(System.Int32,System.Int32,Barebones.Networking.IClientSocket)">
            <summary>
            Notifies master server, how many processes are running on a specified spawner
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfSpawnersServer.NotifyProcessStarted(System.Int32,System.Int32,System.String)">
            <summary>
            Should be called by a spawned process, as soon as it is started
            
            </summary>
            <param name="spawnId"></param>
            <param name="processId"></param>
            <param name="cmdArgs"></param>
        </member>
        <member name="P:Barebones.MasterServer.SpawnerController.Settings">
            <summary>
            Settings, which are used by the default spawn handler
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.SpawnerController.DefaultSpawnerSettings">
            <summary>
            Settings, which are used by the default spawn handler
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.SpawnerOptions.MachineIp">
            <summary>
            Public IP address of the machine, on which the spawner is running
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.SpawnerOptions.MaxProcesses">
            <summary>
            Max number of processes that this spawner can handle. If 0 - unlimited
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.SpawnerOptions.Properties">
            <summary>
            Spawner properties
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.SpawnerOptions.Region">
            <summary>
            Region, to which the spawner belongs
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.SpawnersModule.Spawn(System.Collections.Generic.Dictionary{System.String,System.String},System.String,Barebones.MasterServer.RegisteredSpawner)">
            <summary>
            Requests a specific spawner to spawn a process
            </summary>
            <param name="properties"></param>
            <param name="customArgs"></param>
            <param name="spawner"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.SpawnersModule.GetFilteredSpawners(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Retrieves a list of spawner that can be used with given properties and region name
            </summary>
            <param name="properties"></param>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.SpawnersModule.HasCreationPermissions(Barebones.Networking.IPeer)">
            <summary>
            Returns true, if peer has permissions to register a spawner
            </summary>
            <param name="peer"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.SpawnersModule.HandleRegisterSpawnedProcess(Barebones.Networking.IIncommingMessage)">
            <summary>
            Handles a message from spawned process. Spawned process send this message
            to notify server that it was started
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Barebones.MasterServer.SpawnTask">
            <summary>
            Represents a spawn request, and manages the state of request
            from start to finalization
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.SpawnTask.RegisteredPeer">
            <summary>
            Peer, who registered a started process for this task
            (for example, a game server)
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.SpawnTask.Requester">
            <summary>
            Who requested to spawn
            (most likely clients peer)
            Can be null
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.SpawnTask.WhenDone(System.Action{Barebones.MasterServer.SpawnTask})">
            <summary>
            Callback will be called when spawn task is aborted or completed 
            (game server is opened)
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:Barebones.MasterServer.Msf">
            <summary>
            This class is a central class, which can be used by entities (clients and servers)
            that need to connect to master server, and access it's functionality
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.Msf.Connection">
            <summary>
            Main connection to master server
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.Msf.Advanced">
            <summary>
            Advanced master server framework settings
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.Msf.Client">
            <summary>
            Collection of methods, that can be used BY CLIENT, connected to master server
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.Msf.Server">
            <summary>
            Collection of methods, that can be used from your servers
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.Msf.Create">
            <summary>
            Contains methods for creating some of the common types
            (server sockets, messages and etc)
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.Msf.Helper">
            <summary>
            Contains helper methods, that couldn't be added to any other
            object
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.Msf.Security">
            <summary>
            Contains security-related stuff (encryptions, permission requests)
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.Msf.Events">
            <summary>
            Default events channel
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.Msf.EventNames">
            <summary>
            List of event names, used within the framework
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.Msf.Runtime">
            <summary>
            Contains methods, that work with runtime data
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.Msf.Args">
            <summary>
            Contains command line / terminal values, which were provided
            when starting the process
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.Msf.Version">
            <summary>
            Version of the framework
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.Msf.Connect(System.String,System.Int32,System.Single)">
            <summary>
            Connects to server
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:Barebones.MasterServer.Msf.WhenConnected(System.Action{Barebones.Networking.IClientSocket},System.Single)">
            <summary>
            Invokes a callback, when successfully connected to master server,
            or after the timeout, if connection fails
            </summary>
            <param name="connectionCallback"></param>
            <param name="timeout"></param>
        </member>
        <member name="T:Barebones.MasterServer.Msf.MsfEventNames">
            <summary>
            List of event names, used within the framework
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.Msf.MsfAdvancedSettings">
            <summary>
            Advanced settings wrapper
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.Msf.MsfAdvancedSettings.ClientSocketFactory">
            <summary>
            Factory, used to create client sockets
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.Msf.MsfAdvancedSettings.ServerSocketFactory">
            <summary>
            Factory, used to create server sockets
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.Msf.MsfAdvancedSettings.MessageFactory">
            <summary>
            Message factory
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.Msf.MsfAdvancedSettings.Logging">
            <summary>
            Global logging settings
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.Msf.MsfLogController">
            <summary>
            Logging settings wrapper
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.Msf.MsfLogController.ForceLogging(Barebones.Logging.LogLevel)">
            <summary>
            Overrides log levels of all the loggers
            </summary>
            <param name="logLevel"></param>
        </member>
        <member name="M:Barebones.MasterServer.Msf.MsfCreate.Logger(System.String)">
            <summary>
            Creates a logger of the given name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.Msf.MsfCreate.Logger(System.String,Barebones.Logging.LogLevel)">
            <summary>
            Creates a logger of the given name, and sets its defualt log level
            </summary>
            <param name="name"></param>
            <param name="defaulLogLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.Msf.MsfCreate.SuccessCallback(Barebones.MasterServer.SuccessCallback,System.String)">
            <summary>
            Creates a generic success callback (for lazy people)
            </summary>
            <param name="callback"></param>
            <param name="unknownErrorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.Msf.MsfCreate.Message(System.Int16)">
            <summary>
            Creates an empty message
            </summary>
            <param name="opCode"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.Msf.MsfCreate.Message(System.Int16,System.String)">
            <summary>
            Creates a message with string content
            </summary>
            <param name="opCode"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.Msf.MsfCreate.Message(System.Int16,System.Int32)">
            <summary>
            Creates a message with int content
            </summary>
            <param name="opCode"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.Msf.MsfCreate.Message(System.Int16,System.Byte[])">
            <summary>
            Creates a message with binary data
            </summary>
            <param name="opCode"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.Msf.MsfCreate.Message(System.Int16,UnityEngine.Networking.MessageBase)">
            <summary>
            Creates a message by serializing a standard Unet message
            </summary>
            <param name="opCode"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.Msf.MsfCreate.Message(System.Int16,Barebones.Networking.ISerializablePacket)">
            <summary>
            Creates a message by serializing a packet
            </summary>
            <param name="opCode"></param>
            <param name="packet"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.Msf.MsfHelper.CreateRandomString(System.Int32)">
            <summary>
            Creates a random string of a given length.
            Uses a substring of guid
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.Msf.MsfHelper.GetPublicIp(System.Action{System.String})">
            <summary>
            Retrieves current public IP
            </summary>
            <param name="callback"></param>
        </member>
        <member name="P:Barebones.MasterServer.MsfArgs.StartMaster">
            <summary>
            If true, master server should be started
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.MsfArgs.MasterPort">
            <summary>
            Port, which will be open on the master server
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.MsfArgs.MasterIp">
            <summary>
            Ip address to the master server
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.MsfArgs.MachineIp">
            <summary>
            Public ip of the machine, on which the process is running
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.MsfArgs.DestroyUi">
            <summary>
            If true, some of the Ui game objects will be destroyed.
            (to avoid memory leaks)
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.MsfArgs.SpawnId">
            <summary>
            SpawnId of the spawned process
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.MsfArgs.AssignedPort">
            <summary>
            Port, assigned to the spawned process (most likely a game server)
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.MsfArgs.SpawnCode">
            <summary>
            Code, which is used to ensure that there's no tampering with 
            spawned processes
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.MsfArgs.ExecutablePath">
            <summary>
            Path to the executable (used by the spawner)
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.MsfArgs.DontSpawnInBatchmode">
            <summary>
            If true, will make sure that spawned processes are not spawned in batchmode
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.MsfArgs.MaxProcesses">
            <summary>
            Max number of processes that can be spawned by a spawner
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.MsfArgs.LoadScene">
            <summary>
            Name of the scene to load
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.MsfArgs.DbConnectionString">
            <summary>
            Database connection string (user by some of the database implementations)
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.MsfArgs.LobbyId">
            <summary>
            LobbyId, which is assigned to a spawned process
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.MsfArgs.WebGl">
            <summary>
            If true, it will be considered that we want to start server to
            support webgl clients
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfArgs.ExtractValue(System.String,System.String)">
            <summary>
                Extracts a value for command line arguments provided
            </summary>
            <param name="argName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.MsfBaseClient.SetHandler(Barebones.Networking.IPacketHandler)">
            <summary>
            Sets a message handler to connection, which is used by this this object
            to communicate with server
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfBaseClient.SetHandler(System.Int16,Barebones.Networking.IncommingMessageHandler)">
            <summary>
            Sets a message handler to connection, which is used by this this object
            to communicate with server 
            </summary>
            <param name="opCode"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Barebones.MasterServer.MsfBaseClient.ChangeConnection(Barebones.Networking.IClientSocket)">
            <summary>
            Changes the connection object, and sets all of the message handlers of this object
            to new connection.
            </summary>
            <param name="socket"></param>
        </member>
        <member name="T:Barebones.MasterServer.MsfSecurity">
            <summary>
            Helper class, which implements means to encrypt and decrypt data
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfSecurity.GetAesKey(System.Action{System.String},Barebones.Networking.IClientSocket)">
            <summary>
            Should be called on client. Generates RSA public key, 
            sends it to master, which returns encrypted AES key. After decrypting AES key,
            callback is invoked with the value. You can then use the AES key to encrypt data
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.MsfSecurity.EncryptStringAES(System.String,System.String)">
            <summary>
            Encrypt the given string using AES.  The string can be decrypted using 
            DecryptStringAES().  The sharedSecret parameters must match.
            </summary>
            <param name="plainText">The text to encrypt.</param>
            <param name="sharedSecret">A password used to generate a key for encryption.</param>
        </member>
        <member name="M:Barebones.MasterServer.MsfSecurity.DecryptStringAES(System.String,System.String)">
            <summary>
            Decrypt the given string.  Assumes the string was encrypted using 
            EncryptStringAES(), using an identical sharedSecret.
            </summary>
            <param name="cipherText">The text to decrypt.</param>
            <param name="sharedSecret">A password used to generate a key for decryption.</param>
        </member>
        <member name="M:Barebones.MasterServer.MsfSecurity.CreateHash(System.String)">
            <summary>
                Creates a salted PBKDF2 hash of the password.
            </summary>
            <param name="password">The password to hash.</param>
            <returns>The hash of the password.</returns>
        </member>
        <member name="M:Barebones.MasterServer.MsfSecurity.ValidatePassword(System.String,System.String)">
            <summary>
                Validates a password given a hash of the correct one.
            </summary>
            <param name="password">The password to check.</param>
            <param name="correctHash">A hash of the correct password.</param>
            <returns>True if the password is correct. False otherwise.</returns>
        </member>
        <member name="M:Barebones.MasterServer.MsfSecurity.SlowEquals(System.Byte[],System.Byte[])">
            <summary>
                Compares two byte arrays in length-constant time. This comparison
                method is used so that password hashes cannot be extracted from
                on-line systems using a timing attack and then attacked off-line.
            </summary>
            <param name="a">The first byte array.</param>
            <param name="b">The second byte array.</param>
            <returns>True if both byte arrays are equal. False otherwise.</returns>
        </member>
        <member name="M:Barebones.MasterServer.MsfSecurity.PBKDF2(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
                Computes the PBKDF2-SHA1 hash of a password.
            </summary>
            <param name="password">The password to hash.</param>
            <param name="salt">The salt.</param>
            <param name="iterations">The PBKDF2 iteration count.</param>
            <param name="outputBytes">The length of the hash to generate, in bytes.</param>
            <returns>A hash of the password.</returns>
        </member>
        <member name="T:Barebones.MasterServer.SuccessCallback">
            <summary>
            Generic success callback declaration.
            </summary>
            <param name="isSuccessful"></param>
            <param name="error"></param>
        </member>
        <member name="M:Barebones.MasterServer.IServer.AddModule(Barebones.MasterServer.IServerModule)">
            <summary>
            Adds a module to the server
            </summary>
            <param name="module"></param>
        </member>
        <member name="M:Barebones.MasterServer.IServer.AddModuleAndInitialize(Barebones.MasterServer.IServerModule)">
            <summary>
            Adds a module and tries to initialize all of the uninitialized modules
            </summary>
            <param name="module"></param>
        </member>
        <member name="M:Barebones.MasterServer.IServer.ContainsModule(Barebones.MasterServer.IServerModule)">
            <summary>
            Returns true, if this server contains a module of given type
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.IServer.InitializeModules">
            <summary>
            Tries to initialize modules that were not initialized,
            and returns true if all of the modules are initialized successfully
            </summary>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.IServer.GetModule``1">
            <summary>
            Returns a module of specified type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.IServer.GetInitializedModules">
            <summary>
            Returns an immutable list of initialized modules
            </summary>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.IServer.GetUninitializedModules">
            <summary>
            Returns an immutable list of initialized modules
            </summary>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.IServer.SetHandler(Barebones.Networking.IPacketHandler)">
            <summary>
            Adds a message handler to the collection of handlers.
            It will be invoked when server receives a message with
            OpCode <see cref="P:Barebones.Networking.IPacketHandler.OpCode"/>
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.IServer.SetHandler(System.Int16,Barebones.Networking.IncommingMessageHandler)">
            <summary>
            Adds a message handler to the collection of handlers.
            It will be invoked when server receives a message with
            OpCode <see cref="!:opCode"/>
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.IServer.GetPeer(System.Int32)">
            <summary>
            Returns a connected peer with a given ID
            </summary>
            <param name="peerId"></param>
            <returns></returns>
        </member>
        <member name="P:Barebones.MasterServer.IServerModule.Server">
            <summary>
            Server, which initialized this module.
            Will be null, until the module is initialized
            </summary>
        </member>
        <member name="P:Barebones.MasterServer.ServerModuleBehaviour.Dependencies">
            <summary>
                Returns a list of module types this module depends on
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.ServerModuleBehaviour.Initialize(Barebones.MasterServer.IServer)">
            <summary>
                Called by master server, when module should be started
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.ServerModuleBehaviour.AddDependency``1">
            <summary>
                Adds a dependency to list. Should be called in Awake or Start methods of
                module
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Barebones.MasterServer.ServerModuleBehaviour.DestroyIfExists">
            <summary>
            Returns true, if module should be destroyed
            </summary>
            <returns></returns>
        </member>
        <member name="T:Barebones.MasterServer.AuthDbLdb.AccountDataLdb">
            <summary>
                LiteDB implementation of account data
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.ProfilesDatabaseLdb">
            <summary>
            LiteDB profiles database implementation
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.ProfilesDatabaseLdb.RestoreProfile(Barebones.MasterServer.ObservableServerProfile)">
            <summary>
            Should restore all values of the given profile, 
            or not change them, if there's no entry in the database
            </summary>
            <param name="profile"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.ProfilesDatabaseLdb.UpdateProfile(Barebones.MasterServer.ObservableServerProfile)">
            <summary>
            Should save updated profile into database
            </summary>
            <param name="profile"></param>
        </member>
        <member name="T:Barebones.MasterServer.ProfilesDatabaseLdb.ProfileDataLdb">
            <summary>
            LiteDB profile data implementation
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.CreateGameProgressUi">
            <summary>
                Displays progress of game creation
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.DialogBoxUi">
            <summary>
                Dialog box
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.GamesListUiItem">
            <summary>
                Represents a single row in the games list
            </summary>
        </member>
        <member name="T:Barebones.MasterServer.LoadingScreenUI">
            <summary>
                Displays progress of game creation
            </summary>
        </member>
        <member name="F:Barebones.MasterServer.AlbotRoomMasterServer.AccessProviderTimeout">
            <summary>
            Maximum time the master server can wait for a response from game server
            to see if it can give access to a peer
            </summary>
        </member>
        <member name="E:Barebones.MasterServer.AlbotRoomMasterServer.RoomRegistered">
            <summary>
            Event, invoked when a room is registered
            </summary>
        </member>
        <member name="E:Barebones.MasterServer.AlbotRoomMasterServer.RoomDestroyed">
            <summary>
            Event, invoked when a room is destroyed
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.AlbotRoomMasterServer.RegisterRoom(Barebones.MasterServer.RoomCreationCallback)">
            <summary>
            Sends a request to register a room to the master server,
            uses default room options <see cref="T:Barebones.MasterServer.RoomOptions"/>
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.AlbotRoomMasterServer.RegisterRoom(Barebones.MasterServer.RoomOptions,Barebones.MasterServer.RoomCreationCallback)">
            <summary>
            Sends a request to register a room to master server
            </summary>
            <param name="options"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.AlbotRoomMasterServer.RegisterRoom(Barebones.MasterServer.RoomOptions,Barebones.MasterServer.RoomCreationCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to register a room to master server
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.AlbotRoomMasterServer.DestroyRoom(System.Int32,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Sends a request to destroy a room of a given room id
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.AlbotRoomMasterServer.DestroyRoom(System.Int32,Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to destroy a room of a given room id
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.AlbotRoomMasterServer.ValidateAccess(System.Int32,System.String,Barebones.MasterServer.RoomAccessValidateCallback)">
            <summary>
            Sends a request to master server, to see if a given token is valid
            </summary>
            <param name="roomId"></param>
            <param name="token"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.AlbotRoomMasterServer.ValidateAccess(System.Int32,System.String,Barebones.MasterServer.RoomAccessValidateCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Sends a request to master server, to see if a given token is valid
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.AlbotRoomMasterServer.SaveOptions(System.Int32,Barebones.MasterServer.RoomOptions,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Updates the options of the registered room
            </summary>
            <param name="roomId"></param>
            <param name="options"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.AlbotRoomMasterServer.SaveOptions(System.Int32,Barebones.MasterServer.RoomOptions,Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Updates the options of the registered room
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.AlbotRoomMasterServer.NotifyPlayerLeft(System.Int32,System.Int32,Barebones.MasterServer.SuccessCallback)">
            <summary>
            Notifies master server that a user with a given peer id has left the room
            </summary>
            <param name="roomId"></param>
            <param name="peerId"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.MasterServer.AlbotRoomMasterServer.NotifyPlayerLeft(System.Int32,System.Int32,Barebones.MasterServer.SuccessCallback,Barebones.Networking.IClientSocket)">
            <summary>
            Notifies master server that a user with a given peer id has left the room
            </summary>
        </member>
        <member name="M:Barebones.MasterServer.AlbotRoomMasterServer.GetRoomController(System.Int32)">
            <summary>
            Get's a room controller (of a registered room, which was registered in current process)
            </summary>
            <param name="roomId"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.MasterServer.AlbotRoomMasterServer.GetLocallyCreatedRooms">
            <summary>
            Retrieves all of the locally created rooms (their controllers)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Barebones.Networking.BasePeer">
            <summary>
                This is an abstract implementation of <see cref="T:Barebones.Networking.IPeer" /> interface,
                which handles acknowledgements and SendMessage overloads.
                Extend this, if you want to implement custom protocols
            </summary>
        </member>
        <member name="F:Barebones.Networking.BasePeer.DefaultTimeoutSecs">
            <summary>
                Default timeout, after which response callback is invoked with
                timeout status.
            </summary>
        </member>
        <member name="M:Barebones.Networking.BasePeer.SetProperty(System.Int32,System.Object)">
            <summary>
                Saves data into peer
            </summary>
            <param name="id"></param>
            <param name="data"></param>
        </member>
        <member name="M:Barebones.Networking.BasePeer.GetProperty(System.Int32)">
            <summary>
                Retrieves data from peer, which was stored with <see cref="M:Barebones.Networking.BasePeer.SetProperty(System.Int32,System.Object)" />
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.BasePeer.GetProperty(System.Int32,System.Object)">
            <summary>
                Retrieves data from peer, which was stored with <see cref="M:Barebones.Networking.BasePeer.SetProperty(System.Int32,System.Object)" />
            </summary>
            <param name="id"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.BasePeer.SendMessage(Barebones.Networking.IMessage,Barebones.Networking.ResponseCallback)">
            <summary>
                Sends a message to peer
            </summary>
            <param name="message">Message to send</param>
            <param name="responseCallback">Callback method, which will be invoked when peer responds</param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.BasePeer.SendMessage(Barebones.Networking.IMessage,Barebones.Networking.ResponseCallback,System.Int32)">
            <summary>
                Sends a message to peer
            </summary>
            <param name="message">Message to send</param>
            <param name="responseCallback">Callback method, which will be invoked when peer responds</param>
            <param name="timeoutSecs">If peer fails to respons within this time frame, callback will be invoked with timeout status</param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.BasePeer.SendMessage(Barebones.Networking.IMessage,Barebones.Networking.ResponseCallback,System.Int32,Barebones.Networking.DeliveryMethod)">
            <summary>
                Sends a message to peer
            </summary>
            <param name="message">Message to send</param>
            <param name="responseCallback">Callback method, which will be invoked when peer responds</param>
            <param name="timeoutSecs">If peer fails to respons within this time frame, callback will be invoked with timeout status</param>
            <param name="deliveryMethod">Delivery method</param>
            <returns></returns>
        </member>
        <member name="P:Barebones.Networking.BasePeer.IsConnected">
            <summary>
                True, if connection is stil valid
            </summary>
        </member>
        <member name="M:Barebones.Networking.BasePeer.SendMessage(Barebones.Networking.IMessage,Barebones.Networking.DeliveryMethod)">
            <summary>
                Sends a message to peer
            </summary>
            <param name="message">Message to send</param>
            <param name="deliveryMethod">Delivery method</param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.BasePeer.Disconnect(System.String)">
            <summary>
                Force disconnect
            </summary>
            <param name="reason"></param>
        </member>
        <member name="P:Barebones.Networking.BasePeer.Id">
            <summary>
                Unique id
            </summary>
        </member>
        <member name="M:Barebones.Networking.BasePeer.HandleAckDisposalTick(System.Int64)">
            <summary>
                Called when ack disposal thread ticks
            </summary>
        </member>
        <member name="T:Barebones.Networking.BmUpdateRunner">
            <summary>
                This is an object which gets spawned into game once.
                It's main purpose is to call update methods
            </summary>
        </member>
        <member name="E:Barebones.Networking.BTimer.OnTick">
            <summary>
            Event, which is invoked every second
            </summary>
        </member>
        <member name="M:Barebones.Networking.BTimer.WaitUntil(System.Func{System.Boolean},Barebones.Networking.BTimer.DoneHandler,System.Single)">
            <summary>
                Waits while condition is false
                If timed out, callback will be invoked with false
            </summary>
            <param name="condiction"></param>
            <param name="doneCallback"></param>
            <param name="timeoutSeconds"></param>
        </member>
        <member name="M:Barebones.Networking.BTimer.WaitWhile(System.Func{System.Boolean},Barebones.Networking.BTimer.DoneHandler,System.Single)">
            <summary>
                Waits while condition is true
                If timed out, callback will be invoked with false
            </summary>
            <param name="condiction"></param>
            <param name="doneCallback"></param>
            <param name="timeoutSeconds"></param>
        </member>
        <member name="T:Barebones.Networking.ClientSocketUnet">
            <summary>
                Represents a socket (client socket), which can be used to connect
                to another socket (server socket)
            </summary>
        </member>
        <member name="E:Barebones.Networking.ClientSocketUnet.Connected">
            <summary>
            Event, which is invoked when we successfully 
            connect to another socket
            </summary>
        </member>
        <member name="E:Barebones.Networking.ClientSocketUnet.Disconnected">
            <summary>
            Event, which is invoked when we are
            disconnected from another socket
            </summary>
        </member>
        <member name="E:Barebones.Networking.ClientSocketUnet.StatusChanged">
            <summary>
            Event, invoked when connection status changes
            </summary>
        </member>
        <member name="P:Barebones.Networking.ClientSocketUnet.IsConnected">
            <summary>
            Returns true, if we are connected to another socket
            </summary>
        </member>
        <member name="P:Barebones.Networking.ClientSocketUnet.IsConnecting">
            <summary>
            Returns true, if we're in the process of connecting
            </summary>
        </member>
        <member name="P:Barebones.Networking.ClientSocketUnet.Status">
            <summary>
            Connection status
            </summary>
        </member>
        <member name="M:Barebones.Networking.ClientSocketUnet.Connect(System.String,System.Int32)">
            <summary>
            Starts connecting to another socket
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.ClientSocketUnet.Connect(System.String,System.Int32,System.Int32)">
            <summary>
            Starts connecting to another socket
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="timeoutMillis"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.ClientSocketUnet.Reconnect">
            <summary>
            Disconnects and connects again
            </summary>
        </member>
        <member name="M:Barebones.Networking.ClientSocketUnet.WaitConnection(System.Action{Barebones.Networking.IClientSocket})">
            <summary>
                Invokes a callback after a successful connection,
                instantly if connected, or after the timeout, if failed to connect
            </summary>
            <param name="connectionCallback"></param>
        </member>
        <member name="M:Barebones.Networking.ClientSocketUnet.AddConnectionListener(System.Action,System.Boolean)">
            <summary>
            Adds a listener, which is invoked when connection is established,
            or instantly, if already connected and  <see cref="!:invokeInstantlyIfConnected"/> 
            is true
            </summary>
            <param name="callback"></param>
            <param name="invokeInstantlyIfConnected"></param>
        </member>
        <member name="M:Barebones.Networking.ClientSocketUnet.RemoveConnectionListener(System.Action)">
            <summary>
            Removes connection listener
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.Networking.ClientSocketUnet.WaitConnection(System.Action{Barebones.Networking.IClientSocket},System.Single)">
            <summary>
                Invokes a callback after a successfull connection,
                instantly if connected, or after the timeout, if failed to connect
            </summary>
        </member>
        <member name="M:Barebones.Networking.ClientSocketUnet.SetHandler(Barebones.Networking.IPacketHandler)">
            <summary>
            Adds a packet handler, which will be invoked when a message of
            specific operation code is received
            </summary>
        </member>
        <member name="M:Barebones.Networking.ClientSocketUnet.SetHandler(System.Int16,Barebones.Networking.IncommingMessageHandler)">
            <summary>
            Adds a packet handler, which will be invoked when a message of
            specific operation code is received
            </summary>
        </member>
        <member name="M:Barebones.Networking.ClientSocketUnet.RemoveHandler(Barebones.Networking.IPacketHandler)">
            <summary>
            Removes the packet handler, but only if this exact handler
            was used
            </summary>
            <param name="handler"></param>
        </member>
        <member name="T:Barebones.Networking.ClientSocketWs">
            <summary>
            Client for connecting to websocket server.
            </summary>
        </member>
        <member name="M:Barebones.Networking.ClientSocketWs.WaitConnection(System.Action{Barebones.Networking.IClientSocket},System.Single)">
            <summary>
            Invokes a callback when connection is established, or after the timeout
            (even if failed to connect). If already connected, callback is invoked instantly
            </summary>
            <param name="connectionCallback"></param>
            <param name="timeoutSeconds"></param>
        </member>
        <member name="M:Barebones.Networking.ClientSocketWs.WaitConnection(System.Action{Barebones.Networking.IClientSocket})">
            <summary>
            Invokes a callback when connection is established, or after the timeout
            (even if failed to connect). If already connected, callback is invoked instantly
            </summary>
            <param name="connectionCallback"></param>
        </member>
        <member name="M:Barebones.Networking.ClientSocketWs.AddConnectionListener(System.Action,System.Boolean)">
            <summary>
            Adds a listener, which is invoked when connection is established,
            or instantly, if already connected and  <see cref="!:invokeInstantlyIfConnected"/> 
            is true
            </summary>
            <param name="callback"></param>
            <param name="invokeInstantlyIfConnected"></param>
        </member>
        <member name="M:Barebones.Networking.ClientSocketWs.RemoveConnectionListener(System.Action)">
            <summary>
            Removes connection listener
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.Networking.ClientSocketWs.SetHandler(Barebones.Networking.IPacketHandler)">
            <summary>
            Adds a packet handler, which will be invoked when a message of
            specific operation code is received
            </summary>
        </member>
        <member name="M:Barebones.Networking.ClientSocketWs.SetHandler(System.Int16,Barebones.Networking.IncommingMessageHandler)">
            <summary>
            Adds a packet handler, which will be invoked when a message of
            specific operation code is received
            </summary>
        </member>
        <member name="M:Barebones.Networking.ClientSocketWs.RemoveHandler(Barebones.Networking.IPacketHandler)">
            <summary>
            Removes the packet handler, but only if this exact handler
            was used
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Barebones.Networking.ClientSocketWs.Reconnect">
            <summary>
            Disconnects and connects again
            </summary>
        </member>
        <member name="P:Barebones.Networking.ClientSocketWs.Status">
            <summary>
            Connection status
            </summary>
        </member>
        <member name="M:Barebones.Networking.ClientSocketWs.Connect(System.String,System.Int32)">
            <summary>
            Starts connecting to another socket
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.ClientSocketWs.Connect(System.String,System.Int32,System.Int32)">
            <summary>
            Starts connecting to another socket
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="timeoutMillis"></param>
            <returns></returns>
        </member>
        <member name="P:Barebones.Networking.IClientSocket.Status">
            <summary>
            Connection status
            </summary>
        </member>
        <member name="P:Barebones.Networking.IClientSocket.IsConnected">
            <summary>
            Returns true, if we are connected to another socket
            </summary>
        </member>
        <member name="P:Barebones.Networking.IClientSocket.IsConnecting">
            <summary>
            Returns true, if we're in the process of connecting
            </summary>
        </member>
        <member name="P:Barebones.Networking.IClientSocket.ConnectionIp">
            <summary>
            Ip of the server to which we're connected
            </summary>
        </member>
        <member name="P:Barebones.Networking.IClientSocket.ConnectionPort">
            <summary>
            Port of the server to which we're connected
            </summary>
        </member>
        <member name="E:Barebones.Networking.IClientSocket.Connected">
            <summary>
            Event, which is invoked when we successfully 
            connect to another socket
            </summary>
        </member>
        <member name="E:Barebones.Networking.IClientSocket.Disconnected">
            <summary>
            Event, which is invoked when we are
            disconnected from another socket
            </summary>
        </member>
        <member name="E:Barebones.Networking.IClientSocket.StatusChanged">
            <summary>
            Event, invoked when connection status changes
            </summary>
        </member>
        <member name="M:Barebones.Networking.IClientSocket.Connect(System.String,System.Int32,System.Int32)">
            <summary>
            Starts connecting to another socket
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="timeoutMillis"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.IClientSocket.Connect(System.String,System.Int32)">
            <summary>
            Starts connecting to another socket
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.IClientSocket.WaitConnection(System.Action{Barebones.Networking.IClientSocket},System.Single)">
            <summary>
            Invokes a callback when connection is established, or after the timeout
            (even if failed to connect). If already connected, callback is invoked instantly
            </summary>
            <param name="connectionCallback"></param>
            <param name="timeoutSeconds"></param>
        </member>
        <member name="M:Barebones.Networking.IClientSocket.WaitConnection(System.Action{Barebones.Networking.IClientSocket})">
            <summary>
            Invokes a callback when connection is established, or after the timeout
            (even if failed to connect). If already connected, callback is invoked instantly
            </summary>
            <param name="connectionCallback"></param>
        </member>
        <member name="M:Barebones.Networking.IClientSocket.AddConnectionListener(System.Action,System.Boolean)">
            <summary>
            Adds a listener, which is invoked when connection is established,
            or instantly, if already connected and  <see cref="!:invokeInstantlyIfConnected"/> 
            is true
            </summary>
            <param name="callback"></param>
            <param name="invokeInstantlyIfConnected"></param>
        </member>
        <member name="M:Barebones.Networking.IClientSocket.RemoveConnectionListener(System.Action)">
            <summary>
            Removes connection listener
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Barebones.Networking.IClientSocket.SetHandler(Barebones.Networking.IPacketHandler)">
            <summary>
            Adds a packet handler, which will be invoked when a message of
            specific operation code is received
            </summary>
        </member>
        <member name="M:Barebones.Networking.IClientSocket.SetHandler(System.Int16,Barebones.Networking.IncommingMessageHandler)">
            <summary>
            Adds a packet handler, which will be invoked when a message of
            specific operation code is received
            </summary>
        </member>
        <member name="M:Barebones.Networking.IClientSocket.RemoveHandler(Barebones.Networking.IPacketHandler)">
            <summary>
            Removes the packet handler, but only if this exact handler
            was used
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Barebones.Networking.IClientSocket.Reconnect">
            <summary>
            Disconnects and connects again
            </summary>
        </member>
        <member name="M:Barebones.Networking.IClientSocket.Disconnect">
            <summary>
            Closes socket connection
            </summary>
        </member>
        <member name="P:Barebones.Networking.IIncommingMessage.Flags">
            <summary>
                Message flags
            </summary>
        </member>
        <member name="P:Barebones.Networking.IIncommingMessage.OpCode">
            <summary>
                Operation code (message type)
            </summary>
        </member>
        <member name="P:Barebones.Networking.IIncommingMessage.Peer">
            <summary>
                Sender
            </summary>
        </member>
        <member name="P:Barebones.Networking.IIncommingMessage.AckResponseId">
            <summary>
                Ack id the message is responding to
            </summary>
        </member>
        <member name="P:Barebones.Networking.IIncommingMessage.AckRequestId">
            <summary>
                We add this to a packet to so that receiver knows
                what he responds to
            </summary>
        </member>
        <member name="P:Barebones.Networking.IIncommingMessage.IsExpectingResponse">
            <summary>
                Returns true, if sender expects a response to this message
            </summary>
        </member>
        <member name="P:Barebones.Networking.IIncommingMessage.SequenceChannel">
            <summary>
                For ordering
            </summary>
        </member>
        <member name="P:Barebones.Networking.IIncommingMessage.Status">
            <summary>
                Message status code
            </summary>
        </member>
        <member name="P:Barebones.Networking.IIncommingMessage.HasData">
            <summary>
                Returns true if message contains any data
            </summary>
        </member>
        <member name="M:Barebones.Networking.IIncommingMessage.Respond(Barebones.Networking.IMessage,Barebones.Networking.ResponseStatus)">
            <summary>
                Respond with a message
            </summary>
            <param name="message"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Barebones.Networking.IIncommingMessage.Respond(System.Byte[],Barebones.Networking.ResponseStatus)">
            <summary>
                Respond with data (message is created internally)
            </summary>
            <param name="data"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Barebones.Networking.IIncommingMessage.Respond(Barebones.Networking.ISerializablePacket,Barebones.Networking.ResponseStatus)">
            <summary>
                Respond with data (message is created internally)
            </summary>
            <param name="data"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Barebones.Networking.IIncommingMessage.Respond(UnityEngine.Networking.MessageBase,Barebones.Networking.ResponseStatus)">
            <summary>
            Respons with standard Unet message
            </summary>
            <param name="packet"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Barebones.Networking.IIncommingMessage.Respond(Barebones.Networking.ResponseStatus)">
            <summary>
                Respond with empty message and status code
            </summary>
            <param name="statusCode"></param>
        </member>
        <member name="M:Barebones.Networking.IIncommingMessage.Respond(System.String,Barebones.Networking.ResponseStatus)">
            <summary>
                Respond with string message
            </summary>
        </member>
        <member name="M:Barebones.Networking.IIncommingMessage.Respond(System.Int32,Barebones.Networking.ResponseStatus)">
            <summary>
            Respond with integer
            </summary>
            <param name="response"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Barebones.Networking.IIncommingMessage.AsBytes">
            <summary>
                Returns contents of this message. Mutable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.IIncommingMessage.AsString">
            <summary>
                Decodes content into a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.IIncommingMessage.AsString(System.String)">
            <summary>
                Decodes content into a string. If there's no content,
                returns the <see cref="!:defaultValue"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.IIncommingMessage.AsInt">
            <summary>
                Decodes content into an integer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.IIncommingMessage.Deserialize``1(``0)">
            <summary>
                Writes content of the message into a packet
            </summary>
            <typeparam name="T"></typeparam>
            <param name="packetToBeFilled"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.IIncommingMessage.Deserialize``1">
            <summary>
            Deserializes as a standard uNet message
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.IIncommingMessage.DeserializeList``1(System.Func{``0})">
            <summary>
                Uses content of the message to regenerate list of packets
            </summary>
            <typeparam name="T"></typeparam>
            <param name="packetCreator"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.IIncommingMessage.DeserializeList``1">
            <summary>
                Uses content of the message to generate a list of uNet messages
            </summary>
            <typeparam name="T"></typeparam>
            <param name="packetCreator"></param>
            <returns></returns>
        </member>
        <member name="T:Barebones.Networking.IMessage">
            <summary>
                Represents functionality of a basic outgoing message
            </summary>
        </member>
        <member name="P:Barebones.Networking.IMessage.OpCode">
            <summary>
                Operation code, a.k.a message type
            </summary>
        </member>
        <member name="P:Barebones.Networking.IMessage.Data">
            <summary>
                Content of the message
            </summary>
        </member>
        <member name="P:Barebones.Networking.IMessage.HasData">
            <summary>
                Returns true if data is not empty
            </summary>
        </member>
        <member name="P:Barebones.Networking.IMessage.AckRequestId">
            <summary>
                An id of ack request. It's set when we send a message,
                and expect a response. This is how we tell which message we got a response to
            </summary>
        </member>
        <member name="P:Barebones.Networking.IMessage.AckResponseId">
            <summary>
                Used to identify what message we are responsing to
            </summary>
        </member>
        <member name="P:Barebones.Networking.IMessage.Flags">
            <summary>
                Internal flags, used to help identify what kind of message we've received
            </summary>
        </member>
        <member name="P:Barebones.Networking.IMessage.Status">
            <summary>
                Status code of the message
            </summary>
        </member>
        <member name="M:Barebones.Networking.IMessage.SetBinary(System.Byte[])">
            <summary>
                Overrides current data
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.IMessage.ToBytes">
            <summary>
                Serializes message to byte array
            </summary>
            <returns></returns>
        </member>
        <member name="T:Barebones.Networking.IMessageFactory">
            <summary>
                Represents basic functionality of message factory
            </summary>
        </member>
        <member name="M:Barebones.Networking.IMessageFactory.Create(System.Int16)">
            <summary>
                Creates an empty message
            </summary>
            <param name="opCode"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.IMessageFactory.Create(System.Int16,System.Byte[])">
            <summary>
                Creates a message filled with data
            </summary>
            <param name="opCode"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.IMessageFactory.FromBytes(System.Byte[],System.Int32,Barebones.Networking.IPeer)">
            <summary>
                Reconstructs message bytes into an incomming message
            </summary>
            <param name="buffer"></param>
            <param name="peer"></param>
            <returns></returns>
        </member>
        <member name="P:Barebones.Networking.IMsgDispatcher.Peer">
            <summary>
            Peer, to which we have connected
            </summary>
        </member>
        <member name="T:Barebones.Networking.IncommingMessage">
            <summary>
                Default implementation of incomming message
            </summary>
        </member>
        <member name="P:Barebones.Networking.IncommingMessage.Flags">
            <summary>
                Message flags
            </summary>
        </member>
        <member name="P:Barebones.Networking.IncommingMessage.OpCode">
            <summary>
                Operation code (message type)
            </summary>
        </member>
        <member name="P:Barebones.Networking.IncommingMessage.Peer">
            <summary>
                Sender
            </summary>
        </member>
        <member name="P:Barebones.Networking.IncommingMessage.AckResponseId">
            <summary>
                Ack id the message is responding to
            </summary>
        </member>
        <member name="P:Barebones.Networking.IncommingMessage.AckRequestId">
            <summary>
                We add this to a packet to so that receiver knows
                what he responds to
            </summary>
        </member>
        <member name="P:Barebones.Networking.IncommingMessage.IsExpectingResponse">
            <summary>
                Returns true, if sender expects a response to this message
            </summary>
        </member>
        <member name="P:Barebones.Networking.IncommingMessage.SequenceChannel">
            <summary>
                For ordering
            </summary>
        </member>
        <member name="P:Barebones.Networking.IncommingMessage.Status">
            <summary>
                Message status code
            </summary>
        </member>
        <member name="M:Barebones.Networking.IncommingMessage.Respond(Barebones.Networking.IMessage,Barebones.Networking.ResponseStatus)">
            <summary>
                Respond with a message
            </summary>
            <param name="message"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Barebones.Networking.IncommingMessage.Respond(System.Byte[],Barebones.Networking.ResponseStatus)">
            <summary>
                Respond with data (message is created internally)
            </summary>
            <param name="data"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Barebones.Networking.IncommingMessage.Respond(Barebones.Networking.ISerializablePacket,Barebones.Networking.ResponseStatus)">
            <summary>
                Respond with data (message is created internally)
            </summary>
            <param name="data"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Barebones.Networking.IncommingMessage.Respond(Barebones.Networking.ResponseStatus)">
            <summary>
                Respond with empty message and status code
            </summary>
            <param name="statusCode"></param>
        </member>
        <member name="P:Barebones.Networking.IncommingMessage.HasData">
            <summary>
                Returns true if message contains any data
            </summary>
        </member>
        <member name="M:Barebones.Networking.IncommingMessage.AsBytes">
            <summary>
                Returns contents of this message. Mutable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.IncommingMessage.AsString">
            <summary>
                Decodes content into a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.IncommingMessage.AsString(System.String)">
            <summary>
                Decodes content into a string. If there's no content,
                returns the <see cref="!:defaultValue"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.IncommingMessage.AsInt">
            <summary>
                Decodes content into an integer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.IncommingMessage.Deserialize``1(``0)">
            <summary>
                Writes content of the message into a packet
            </summary>
            <typeparam name="T"></typeparam>
            <param name="packetToBeFilled"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.IncommingMessage.DeserializeList``1(System.Func{``0})">
            <summary>
                Uses content of the message to regenerate list of packets
            </summary>
            <typeparam name="T"></typeparam>
            <param name="packetCreator"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.IncommingMessage.DeserializeList``1">
            <summary>
            Deserializes a list of standard uNet messages
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Barebones.Networking.IPacketHandler">
            <summary>
                Represents an object that can handle packets
            </summary>
        </member>
        <member name="P:Barebones.Networking.IPacketHandler.OpCode">
            <summary>
                Operation code of the message to be handled
            </summary>
        </member>
        <member name="M:Barebones.Networking.IPacketHandler.Handle(Barebones.Networking.IIncommingMessage)">
            <summary>
                Handling of the message
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Barebones.Networking.IPeer">
            <summary>
                Represents connection peer
            </summary>
        </member>
        <member name="P:Barebones.Networking.IPeer.Id">
            <summary>
                Unique peer id
            </summary>
        </member>
        <member name="P:Barebones.Networking.IPeer.IsConnected">
            <summary>
                True, if connection is stil valid
            </summary>
        </member>
        <member name="E:Barebones.Networking.IPeer.Disconnected">
            <summary>
                Invoked when peer disconnects
            </summary>
        </member>
        <member name="E:Barebones.Networking.IPeer.MessageReceived">
            <summary>
                Invoked when peer receives a message
            </summary>
        </member>
        <member name="E:Barebones.Networking.IPeer.OnMessage">
            <summary>
                Invoked when peer receives a message
            </summary>
        </member>
        <member name="M:Barebones.Networking.IPeer.Disconnect(System.String)">
            <summary>
                Force disconnect
            </summary>
            <param name="reason"></param>
        </member>
        <member name="M:Barebones.Networking.IPeer.SendMessage(Barebones.Networking.IMessage,Barebones.Networking.ResponseCallback,System.Int32,Barebones.Networking.DeliveryMethod)">
            <summary>
                Sends a message to peer
            </summary>
            <param name="message">Message to send</param>
            <param name="responseCallback">Callback method, which will be invoked when peer responds</param>
            <param name="timeoutSecs">If peer fails to respons within this time frame, callback will be invoked with timeout status</param>
            <param name="deliveryMethod">Delivery method</param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.IPeer.SendMessage(Barebones.Networking.IMessage,Barebones.Networking.DeliveryMethod)">
            <summary>
                Sends a message to peer
            </summary>
            <param name="message">Message to send</param>
            <param name="deliveryMethod">Delivery method</param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.IPeer.SetProperty(System.Int32,System.Object)">
            <summary>
                Stores a property into peer
            </summary>
            <param name="id"></param>
            <param name="data"></param>
        </member>
        <member name="M:Barebones.Networking.IPeer.GetProperty(System.Int32)">
            <summary>
                Retrieves a property from the peer
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.IPeer.GetProperty(System.Int32,System.Object)">
            <summary>
                Retrieves a property from the peer, and if it's not found,
                retrieves a default value
            </summary>
            <param name="id"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.IPeer.AddExtension``1(``0)">
            <summary>
            Adds an extension to this peer
            </summary>
            <typeparam name="T"></typeparam>
            <param name="extension"></param>
        </member>
        <member name="M:Barebones.Networking.IPeer.GetExtension``1">
            <summary>
            Retrieves an extension of this peer
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="E:Barebones.Networking.IServerSocket.Connected">
            <summary>
            Invoked, when a client connects to this socket
            </summary>
        </member>
        <member name="E:Barebones.Networking.IServerSocket.OnConnected">
            <summary>
            Invoked, when a client connects to this socket
            </summary>
        </member>
        <member name="E:Barebones.Networking.IServerSocket.Disconnected">
            <summary>
            Invoked, when client disconnects from this socket
            </summary>
        </member>
        <member name="E:Barebones.Networking.IServerSocket.OnDisconnected">
            <summary>
            Invoked, when client disconnects from this socket
            </summary>
        </member>
        <member name="M:Barebones.Networking.IServerSocket.Listen(System.Int32)">
            <summary>
            Opens the socket and starts listening to a given port
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:Barebones.Networking.IServerSocket.Stop">
            <summary>
            Stops listening
            </summary>
        </member>
        <member name="T:Barebones.Networking.Message">
            <summary>
                Represents an outgoing message.
                Default barebones implementation
            </summary>
        </member>
        <member name="P:Barebones.Networking.Message.OpCode">
            <summary>
                Operation code, a.k.a message type
            </summary>
        </member>
        <member name="P:Barebones.Networking.Message.Data">
            <summary>
                Content of the message
            </summary>
        </member>
        <member name="P:Barebones.Networking.Message.HasData">
            <summary>
                Returns true if data is not empty
            </summary>
        </member>
        <member name="P:Barebones.Networking.Message.AckRequestId">
            <summary>
                An id of ack request. It's set when we send a message,
                and expect a response. This is how we tell which message we got a response to
            </summary>
        </member>
        <member name="P:Barebones.Networking.Message.AckResponseId">
            <summary>
                Used to identify what message we are responsing to
            </summary>
        </member>
        <member name="P:Barebones.Networking.Message.Flags">
            <summary>
                Internal flags, used to help identify what kind of message we've received
            </summary>
        </member>
        <member name="P:Barebones.Networking.Message.Status">
            <summary>
                Status code of the message
            </summary>
        </member>
        <member name="M:Barebones.Networking.Message.ToBytes">
            <summary>
                Serializes message to byte array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.MessageFactory.FromBytes(System.Byte[],System.Int32,Barebones.Networking.IPeer)">
            <summary>
                Used raw byte data to create an <see cref="T:Barebones.Networking.IIncommingMessage" />
            </summary>
            <param name="buffer"></param>
            <param name="start"></param>
            <param name="peer"></param>
            <returns></returns>
        </member>
        <member name="T:Barebones.Networking.MessageHelper">
            <summary>
                Helper class, that uses <see cref="T:Barebones.Networking.IMessageFactory" /> implementation
                to help create messages
            </summary>
        </member>
        <member name="M:Barebones.Networking.MessageHelper.SetFactory(Barebones.Networking.IMessageFactory)">
            <summary>
                Changes current message factory.
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:Barebones.Networking.MessageHelper.Deserialize``1(System.Byte[],``0)">
            <summary>
                Writes data into a provided packet
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="packet"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.MessageHelper.DeserializeList``1(System.Byte[],System.Func{``0})">
            <summary>
                Deserializes a list of packets
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="packetCreator">Factory function</param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.MessageHelper.Create(System.Int16)">
            <summary>
                Creates an empty message
            </summary>
            <param name="opCode"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.MessageHelper.Create(System.Int16,System.Byte[])">
            <summary>
                Creates a message with data
            </summary>
            <param name="opCode"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.MessageHelper.Create(System.Int16,System.String)">
            <summary>
                Creates a message from string
            </summary>
            <param name="opCode"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.MessageHelper.Create(System.Int16,System.Int32)">
            <summary>
                Creates a message from int
            </summary>
            <param name="opCode"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.MessageHelper.Create(System.Int16,UnityEngine.Networking.MessageBase)">
            <summary>
            Serializes a standard uNet message
            </summary>
            <param name="opCode"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.MessageHelper.FromBytes(System.Byte[],System.Int32,Barebones.Networking.IPeer)">
            <summary>
                Reconstructs message data into <see cref="T:Barebones.Networking.IIncommingMessage" />
            </summary>
            <param name="buffer"></param>
            <param name="peer"></param>
            <returns></returns>
        </member>
        <member name="T:Barebones.Networking.PacketHandler">
            <summary>
                Generic packet handler
            </summary>
        </member>
        <member name="T:Barebones.Networking.PeerUnet">
            <summary>
                Unet low level api based peer implementation
            </summary>
        </member>
        <member name="P:Barebones.Networking.PeerUnet.IsConnected">
            <summary>
                True, if connection is stil valid
            </summary>
        </member>
        <member name="M:Barebones.Networking.PeerUnet.SendMessage(Barebones.Networking.IMessage,Barebones.Networking.DeliveryMethod)">
            <summary>
                Sends a message to peer
            </summary>
            <param name="message">Message to send</param>
            <param name="deliveryMethod">Delivery method</param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.PeerUnet.Disconnect(System.String)">
            <summary>
                Force disconnect
            </summary>
            <param name="reason"></param>
        </member>
        <member name="T:Barebones.Networking.SerializablePacket">
            <summary>
                Base class for serializable packets
            </summary>
        </member>
        <member name="M:Barebones.Networking.SerializablePacket.WriteSmallArray(System.Single[],Barebones.Networking.EndianBinaryWriter)">
            <summary>
                Write an array whichs length is lower than byte value
            </summary>
            <param name="data"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Barebones.Networking.SerializablePacket.ReadSmallArray(Barebones.Networking.EndianBinaryReader)">
            <summary>
                Read an array whichs length is lower than byte value
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:Barebones.Networking.SerializationExtensions">
            <summary>
                Contains functions to help easily serialize / deserialize some common types
            </summary>
        </member>
        <member name="T:Barebones.Networking.Serializer">
            <summary>
            Quick, universal serializer
            Not sure if it works, but it should :D
            </summary>
        </member>
        <member name="T:Barebones.Networking.ServerSocketUnet">
            <summary>
                Represents a socket, which listen to a port, and to which
                other clients can connect
            </summary>
        </member>
        <member name="T:Barebones.Networking.ServerSocketWs">
            <summary>
            Server socket, which accepts websocket connections
            </summary>
        </member>
        <member name="M:Barebones.Networking.ServerSocketWs.Listen(System.Int32)">
            <summary>
            Opens the socket and starts listening to a given port
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:Barebones.Networking.ServerSocketWs.Stop">
            <summary>
            Stops listening
            </summary>
        </member>
        <member name="T:Barebones.Networking.ServerSocketWs.WsService">
            <summary>
            Web socket service, designed to work with unitys main thread
            </summary>
        </member>
        <member name="T:Barebones.Networking.BigEndianBitConverter">
            <summary>
                Implementation of EndianBitConverter which converts to/from big-endian
                byte arrays.
            </summary>
        </member>
        <member name="P:Barebones.Networking.BigEndianBitConverter.Endianness">
            <summary>
                Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="M:Barebones.Networking.BigEndianBitConverter.IsLittleEndian">
            <summary>
                Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
                Different computer architectures store data using different byte orders. "Big-endian"
                means the most significant byte is on the left end of a word. "Little-endian" means the
                most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="M:Barebones.Networking.BigEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
                Copies the specified number of bytes from value to buffer, starting at index.
            </summary>
            <param name="value">The value to copy</param>
            <param name="bytes">The number of bytes to copy</param>
            <param name="buffer">The buffer to copy the bytes into</param>
            <param name="index">The index to start at</param>
        </member>
        <member name="M:Barebones.Networking.BigEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Returns a value built from the specified number of bytes from the given buffer,
                starting at index.
            </summary>
            <param name="buffer">The data in byte array format</param>
            <param name="startIndex">The first index to use</param>
            <param name="bytesToConvert">The number of bytes to use</param>
            <returns>The value built from the given bytes</returns>
        </member>
        <member name="T:Barebones.Networking.DoubleConverter">
            <summary>
                A class to allow the conversion of doubles to string representations of
                their exact decimal values. The implementation aims for readability over
                efficiency.
            </summary>
        </member>
        <member name="M:Barebones.Networking.DoubleConverter.ToExactString(System.Double)">
            <summary>
                Converts the given double to a string representation of its
                exact decimal value.
            </summary>
            <param name="d">The double to convert.</param>
            <returns>A string representation of the double's exact decimal value.</returns>
        </member>
        <member name="T:Barebones.Networking.DoubleConverter.ArbitraryDecimal">
            <summary>
                Private class used for manipulating sequences of decimal digits.
            </summary>
        </member>
        <member name="F:Barebones.Networking.DoubleConverter.ArbitraryDecimal.decimalPoint">
            <summary>
                How many digits are *after* the decimal point
            </summary>
        </member>
        <member name="F:Barebones.Networking.DoubleConverter.ArbitraryDecimal.digits">
            <summary>Digits in the decimal expansion, one byte per digit</summary>
        </member>
        <member name="M:Barebones.Networking.DoubleConverter.ArbitraryDecimal.#ctor(System.Int64)">
            <summary>
                Constructs an arbitrary decimal expansion from the given long.
                The long must not be negative.
            </summary>
        </member>
        <member name="M:Barebones.Networking.DoubleConverter.ArbitraryDecimal.MultiplyBy(System.Int32)">
            <summary>
                Multiplies the current expansion by the given amount, which should
                only be 2 or 5.
            </summary>
        </member>
        <member name="M:Barebones.Networking.DoubleConverter.ArbitraryDecimal.Shift(System.Int32)">
            <summary>
                Shifts the decimal point; a negative value makes
                the decimal expansion bigger (as fewer digits come after the
                decimal place) and a positive value makes the decimal
                expansion smaller.
            </summary>
        </member>
        <member name="M:Barebones.Networking.DoubleConverter.ArbitraryDecimal.Normalize">
            <summary>
                Removes leading/trailing zeroes from the expansion.
            </summary>
        </member>
        <member name="M:Barebones.Networking.DoubleConverter.ArbitraryDecimal.ToString">
            <summary>
                Converts the value to a proper decimal string representation.
            </summary>
        </member>
        <member name="T:Barebones.Networking.EndianBitConverter">
            <summary>
                Equivalent of System.BitConverter, but with either endianness.
            </summary>
        </member>
        <member name="T:Barebones.Networking.EndianBitConverter.Int32SingleUnion">
            <summary>
                Union used solely for the equivalent of DoubleToInt64Bits and vice versa.
            </summary>
        </member>
        <member name="F:Barebones.Networking.EndianBitConverter.Int32SingleUnion.i">
            <summary>
                Int32 version of the value.
            </summary>
        </member>
        <member name="F:Barebones.Networking.EndianBitConverter.Int32SingleUnion.f">
            <summary>
                Single version of the value.
            </summary>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.Int32SingleUnion.#ctor(System.Int32)">
            <summary>
                Creates an instance representing the given integer.
            </summary>
            <param name="i">The integer value of the new instance.</param>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.Int32SingleUnion.#ctor(System.Single)">
            <summary>
                Creates an instance representing the given floating point number.
            </summary>
            <param name="f">The floating point value of the new instance.</param>
        </member>
        <member name="P:Barebones.Networking.EndianBitConverter.Int32SingleUnion.AsInt32">
            <summary>
                Returns the value of the instance as an integer.
            </summary>
        </member>
        <member name="P:Barebones.Networking.EndianBitConverter.Int32SingleUnion.AsSingle">
            <summary>
                Returns the value of the instance as a floating point number.
            </summary>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.IsLittleEndian">
            <summary>
                Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
                Different computer architectures store data using different byte orders. "Big-endian"
                means the most significant byte is on the left end of a word. "Little-endian" means the
                most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:Barebones.Networking.EndianBitConverter.Endianness">
            <summary>
                Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="P:Barebones.Networking.EndianBitConverter.Little">
            <summary>
                Returns a little-endian bit converter instance. The same instance is
                always returned.
            </summary>
        </member>
        <member name="P:Barebones.Networking.EndianBitConverter.Big">
            <summary>
                Returns a big-endian bit converter instance. The same instance is
                always returned.
            </summary>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.DoubleToInt64Bits(System.Double)">
            <summary>
                Converts the specified double-precision floating point number to a
                64-bit signed integer. Note: the endianness of this converter does not
                affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 64-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.Int64BitsToDouble(System.Int64)">
            <summary>
                Converts the specified 64-bit signed integer to a double-precision
                floating point number. Note: the endianness of this converter does not
                affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A double-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.SingleToInt32Bits(System.Single)">
            <summary>
                Converts the specified single-precision floating point number to a
                32-bit signed integer. Note: the endianness of this converter does not
                affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 32-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.Int32BitsToSingle(System.Int32)">
            <summary>
                Converts the specified 32-bit signed integer to a single-precision floating point
                number. Note: the endianness of this converter does not
                affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A single-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.ToBoolean(System.Byte[],System.Int32)">
            <summary>
                Returns a Boolean value converted from one byte at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.ToChar(System.Byte[],System.Int32)">
            <summary>
                Returns a Unicode character converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A character formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
                Returns a double-precision floating point number converted from eight bytes
                at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A double precision floating point number formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
                Returns a single-precision floating point number converted from four bytes
                at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A single precision floating point number formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
                Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
                Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
                Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
                Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
                Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
                Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.CheckByteArgument(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Checks the given argument for validity.
            </summary>
            <param name="value">The byte array passed in</param>
            <param name="startIndex">The start index passed in</param>
            <param name="bytesRequired">The number of bytes required</param>
            <exception cref="T:System.ArgumentNullException">value is a null reference</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                startIndex is less than zero or greater than the length of value minus bytesRequired.
            </exception>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.CheckedFromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Checks the arguments for validity before calling FromBytes
                (which can therefore assume the arguments are valid).
            </summary>
            <param name="value">The bytes to convert after checking</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to convert</param>
            <returns></returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Convert the given number of bytes from the given array, from the given start
                position, into a long, using the bytes as the least significant part of the long.
                By the time this is called, the arguments have been checked for validity.
            </summary>
            <param name="value">The bytes to convert</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to use in the conversion</param>
            <returns>The converted number</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.ToString(System.Byte[])">
            <summary>
                Returns a String converted from the elements of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <remarks>All the elements of value are converted.</remarks>
            <returns>
                A String of hexadecimal pairs separated by hyphens, where each pair
                represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.ToString(System.Byte[],System.Int32)">
            <summary>
                Returns a String converted from the elements of a byte array starting at a specified array position.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <remarks>The elements from array position startIndex to the end of the array are converted.</remarks>
            <returns>
                A String of hexadecimal pairs separated by hyphens, where each pair
                represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Returns a String converted from a specified number of bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <param name="length">The number of bytes to convert.</param>
            <remarks>The length elements from array position startIndex are converted.</remarks>
            <returns>
                A String of hexadecimal pairs separated by hyphens, where each pair
                represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.ToDecimal(System.Byte[],System.Int32)">
            <summary>
                Returns a decimal value converted from sixteen bytes
                at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A decimal  formed by sixteen bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.GetBytes(System.Decimal)">
            <summary>
                Returns the specified decimal value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 16.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.CopyBytes(System.Decimal,System.Byte[],System.Int32)">
            <summary>
                Copies the specified decimal value into the specified byte array,
                beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.GetBytes(System.Int64,System.Int32)">
            <summary>
                Returns an array with the given number of bytes formed
                from the least significant bytes of the specified value.
                This is used to implement the other GetBytes methods.
            </summary>
            <param name="value">The value to get bytes for</param>
            <param name="bytes">The number of significant bytes to return</param>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.GetBytes(System.Boolean)">
            <summary>
                Returns the specified Boolean value as an array of bytes.
            </summary>
            <param name="value">A Boolean value.</param>
            <returns>An array of bytes with length 1.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.GetBytes(System.Char)">
            <summary>
                Returns the specified Unicode character value as an array of bytes.
            </summary>
            <param name="value">A character to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.GetBytes(System.Double)">
            <summary>
                Returns the specified double-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.GetBytes(System.Int16)">
            <summary>
                Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.GetBytes(System.Int32)">
            <summary>
                Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.GetBytes(System.Int64)">
            <summary>
                Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.GetBytes(System.Single)">
            <summary>
                Returns the specified single-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.GetBytes(System.UInt16)">
            <summary>
                Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.GetBytes(System.UInt32)">
            <summary>
                Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.GetBytes(System.UInt64)">
            <summary>
                Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.CopyBytes(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
                Copies the given number of bytes from the least-specific
                end of the specified value into the specified byte array, beginning
                at the specified index.
                This is used to implement the other CopyBytes methods.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
                Copies the given number of bytes from the least-specific
                end of the specified value into the specified byte array, beginning
                at the specified index.
                This must be implemented in concrete derived classes, but the implementation
                may assume that the value will fit into the buffer.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.CopyBytes(System.Boolean,System.Byte[],System.Int32)">
            <summary>
                Copies the specified Boolean value into the specified byte array,
                beginning at the specified index.
            </summary>
            <param name="value">A Boolean value.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.CopyBytes(System.Char,System.Byte[],System.Int32)">
            <summary>
                Copies the specified Unicode character value into the specified byte array,
                beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.CopyBytes(System.Double,System.Byte[],System.Int32)">
            <summary>
                Copies the specified double-precision floating point value into the specified byte array,
                beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.CopyBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
                Copies the specified 16-bit signed integer value into the specified byte array,
                beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.CopyBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
                Copies the specified 32-bit signed integer value into the specified byte array,
                beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.CopyBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
                Copies the specified 64-bit signed integer value into the specified byte array,
                beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.CopyBytes(System.Single,System.Byte[],System.Int32)">
            <summary>
                Copies the specified single-precision floating point value into the specified byte array,
                beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.CopyBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
                Copies the specified 16-bit unsigned integer value into the specified byte array,
                beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.CopyBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
                Copies the specified 32-bit unsigned integer value into the specified byte array,
                beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Barebones.Networking.EndianBitConverter.CopyBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
                Copies the specified 64-bit unsigned integer value into the specified byte array,
                beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="T:Barebones.Networking.Endianness">
            <summary>
                Endianness of a converter
            </summary>
        </member>
        <member name="F:Barebones.Networking.Endianness.LittleEndian">
            <summary>
                Little endian - least significant byte first
            </summary>
        </member>
        <member name="F:Barebones.Networking.Endianness.BigEndian">
            <summary>
                Big endian - most significant byte first
            </summary>
        </member>
        <member name="T:Barebones.Networking.LittleEndianBitConverter">
            <summary>
                Implementation of EndianBitConverter which converts to/from little-endian
                byte arrays.
            </summary>
        </member>
        <member name="P:Barebones.Networking.LittleEndianBitConverter.Endianness">
            <summary>
                Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="M:Barebones.Networking.LittleEndianBitConverter.IsLittleEndian">
            <summary>
                Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
                Different computer architectures store data using different byte orders. "Big-endian"
                means the most significant byte is on the left end of a word. "Little-endian" means the
                most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="M:Barebones.Networking.LittleEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
                Copies the specified number of bytes from value to buffer, starting at index.
            </summary>
            <param name="value">The value to copy</param>
            <param name="bytes">The number of bytes to copy</param>
            <param name="buffer">The buffer to copy the bytes into</param>
            <param name="index">The index to start at</param>
        </member>
        <member name="M:Barebones.Networking.LittleEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Returns a value built from the specified number of bytes from the given buffer,
                starting at index.
            </summary>
            <param name="buffer">The data in byte array format</param>
            <param name="startIndex">The first index to use</param>
            <param name="bytesToConvert">The number of bytes to use</param>
            <returns>The value built from the given bytes</returns>
        </member>
        <member name="T:Barebones.Networking.EndianBinaryReader">
            <summary>
                Equivalent of System.IO.BinaryReader, but with either endianness, depending on
                the EndianBitConverter it is constructed with. No data is buffered in the
                reader; the client may seek within the stream at will.
            </summary>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.Dispose">
            <summary>
                Disposes of the underlying stream.
            </summary>
        </member>
        <member name="F:Barebones.Networking.EndianBinaryReader.disposed">
            <summary>
                Whether or not this reader has been disposed yet.
            </summary>
        </member>
        <member name="F:Barebones.Networking.EndianBinaryReader.decoder">
            <summary>
                Decoder to use for string conversions.
            </summary>
        </member>
        <member name="F:Barebones.Networking.EndianBinaryReader.buffer">
            <summary>
                Buffer used for temporary storage before conversion into primitives
            </summary>
        </member>
        <member name="F:Barebones.Networking.EndianBinaryReader.charBuffer">
            <summary>
                Buffer used for temporary storage when reading a single character
            </summary>
        </member>
        <member name="F:Barebones.Networking.EndianBinaryReader.minBytesPerChar">
            <summary>
                Minimum number of bytes used to encode a character
            </summary>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.#ctor(Barebones.Networking.EndianBitConverter,System.IO.Stream)">
            <summary>
                Equivalent of System.IO.BinaryWriter, but with either endianness, depending on
                the EndianBitConverter it is constructed with.
            </summary>
            <param name="bitConverter">Converter to use when reading data</param>
            <param name="stream">Stream to read data from</param>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.#ctor(Barebones.Networking.EndianBitConverter,System.IO.Stream,System.Text.Encoding)">
            <summary>
                Constructs a new binary reader with the given bit converter, reading
                to the given stream, using the given encoding.
            </summary>
            <param name="bitConverter">Converter to use when reading data</param>
            <param name="stream">Stream to read data from</param>
            <param name="encoding">Encoding to use when reading character data</param>
        </member>
        <member name="P:Barebones.Networking.EndianBinaryReader.BitConverter">
            <summary>
                The bit converter used to read values from the stream
            </summary>
        </member>
        <member name="P:Barebones.Networking.EndianBinaryReader.Encoding">
            <summary>
                The encoding used to read strings
            </summary>
        </member>
        <member name="P:Barebones.Networking.EndianBinaryReader.BaseStream">
            <summary>
                Gets the underlying stream of the EndianBinaryReader.
            </summary>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.Close">
            <summary>
                Closes the reader, including the underlying stream..
            </summary>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.Seek(System.Int32,System.IO.SeekOrigin)">
            <summary>
                Seeks within the stream.
            </summary>
            <param name="offset">Offset to seek to.</param>
            <param name="origin">Origin of seek operation.</param>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.ReadByte">
            <summary>
                Reads a single byte from the stream.
            </summary>
            <returns>The byte read</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.ReadSByte">
            <summary>
                Reads a single signed byte from the stream.
            </summary>
            <returns>The byte read</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.ReadBoolean">
            <summary>
                Reads a boolean from the stream. 1 byte is read.
            </summary>
            <returns>The boolean read</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.ReadInt16">
            <summary>
                Reads a 16-bit signed integer from the stream, using the bit converter
                for this reader. 2 bytes are read.
            </summary>
            <returns>The 16-bit integer read</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.ReadInt32">
            <summary>
                Reads a 32-bit signed integer from the stream, using the bit converter
                for this reader. 4 bytes are read.
            </summary>
            <returns>The 32-bit integer read</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.ReadInt64">
            <summary>
                Reads a 64-bit signed integer from the stream, using the bit converter
                for this reader. 8 bytes are read.
            </summary>
            <returns>The 64-bit integer read</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.ReadUInt16">
            <summary>
                Reads a 16-bit unsigned integer from the stream, using the bit converter
                for this reader. 2 bytes are read.
            </summary>
            <returns>The 16-bit unsigned integer read</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.ReadUInt32">
            <summary>
                Reads a 32-bit unsigned integer from the stream, using the bit converter
                for this reader. 4 bytes are read.
            </summary>
            <returns>The 32-bit unsigned integer read</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.ReadUInt64">
            <summary>
                Reads a 64-bit unsigned integer from the stream, using the bit converter
                for this reader. 8 bytes are read.
            </summary>
            <returns>The 64-bit unsigned integer read</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.ReadSingle">
            <summary>
                Reads a single-precision floating-point value from the stream, using the bit converter
                for this reader. 4 bytes are read.
            </summary>
            <returns>The floating point value read</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.ReadDouble">
            <summary>
                Reads a double-precision floating-point value from the stream, using the bit converter
                for this reader. 8 bytes are read.
            </summary>
            <returns>The floating point value read</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.ReadDecimal">
            <summary>
                Reads a decimal value from the stream, using the bit converter
                for this reader. 16 bytes are read.
            </summary>
            <returns>The decimal value read</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.Read">
            <summary>
                Reads a single character from the stream, using the character encoding for
                this reader. If no characters have been fully read by the time the stream ends,
                -1 is returned.
            </summary>
            <returns>The character read, or -1 for end of stream.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
                Reads the specified number of characters into the given buffer, starting at
                the given index.
            </summary>
            <param name="data">The buffer to copy data into</param>
            <param name="index">The first index to copy data into</param>
            <param name="count">The number of characters to read</param>
            <returns>
                The number of characters actually read. This will only be less than
                the requested number of characters if the end of the stream is reached.
            </returns>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads the specified number of bytes into the given buffer, starting at
                the given index.
            </summary>
            <param name="buffer">The buffer to copy data into</param>
            <param name="index">The first index to copy data into</param>
            <param name="count">The number of bytes to read</param>
            <returns>
                The number of bytes actually read. This will only be less than
                the requested number of bytes if the end of the stream is reached.
            </returns>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.ReadBytes(System.Int32)">
            <summary>
                Reads the specified number of bytes, returning them in a new byte array.
                If not enough bytes are available before the end of the stream, this
                method will return what is available.
            </summary>
            <param name="count">The number of bytes to read</param>
            <returns>The bytes read</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.ReadBytesOrThrow(System.Int32)">
            <summary>
                Reads the specified number of bytes, returning them in a new byte array.
                If not enough bytes are available before the end of the stream, this
                method will throw an IOException.
            </summary>
            <param name="count">The number of bytes to read</param>
            <returns>The bytes read</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.Read7BitEncodedInt">
            <summary>
                Reads a 7-bit encoded integer from the stream. This is stored with the least significant
                information first, with 7 bits of information per byte of value, and the top
                bit as a continuation flag. This method is not affected by the endianness
                of the bit converter.
            </summary>
            <returns>The 7-bit encoded integer read from the stream.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.ReadBigEndian7BitEncodedInt">
            <summary>
                Reads a 7-bit encoded integer from the stream. This is stored with the most significant
                information first, with 7 bits of information per byte of value, and the top
                bit as a continuation flag. This method is not affected by the endianness
                of the bit converter.
            </summary>
            <returns>The 7-bit encoded integer read from the stream.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.ReadString">
            <summary>
                Reads a length-prefixed string from the stream, using the encoding for this reader.
                A 7-bit encoded integer is first read, which specifies the number of bytes
                to read from the stream. These bytes are then converted into a string with
                the encoding for this reader.
            </summary>
            <returns>The string read from the stream.</returns>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.CheckDisposed">
            <summary>
                Checks whether or not the reader has been disposed, throwing an exception if so.
            </summary>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.ReadInternal(System.Byte[],System.Int32)">
            <summary>
                Reads the given number of bytes from the stream, throwing an exception
                if they can't all be read.
            </summary>
            <param name="data">Buffer to read into</param>
            <param name="size">Number of bytes to read</param>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryReader.TryReadInternal(System.Byte[],System.Int32)">
            <summary>
                Reads the given number of bytes from the stream if possible, returning
                the number of bytes actually read, which may be less than requested if
                (and only if) the end of the stream is reached.
            </summary>
            <param name="data">Buffer to read into</param>
            <param name="size">Number of bytes to read</param>
            <returns>Number of bytes actually read</returns>
        </member>
        <member name="T:Barebones.Networking.EndianBinaryWriter">
            <summary>
                Equivalent of System.IO.BinaryWriter, but with either endianness, depending on
                the EndianBitConverter it is constructed with.
            </summary>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.Dispose">
            <summary>
                Disposes of the underlying stream.
            </summary>
        </member>
        <member name="F:Barebones.Networking.EndianBinaryWriter.disposed">
            <summary>
                Whether or not this writer has been disposed yet.
            </summary>
        </member>
        <member name="F:Barebones.Networking.EndianBinaryWriter.buffer">
            <summary>
                Buffer used for temporary storage during conversion from primitives
            </summary>
        </member>
        <member name="F:Barebones.Networking.EndianBinaryWriter.charBuffer">
            <summary>
                Buffer used for Write(char)
            </summary>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.#ctor(Barebones.Networking.EndianBitConverter,System.IO.Stream)">
            <summary>
                Constructs a new binary writer with the given bit converter, writing
                to the given stream, using UTF-8 encoding.
            </summary>
            <param name="bitConverter">Converter to use when writing data</param>
            <param name="stream">Stream to write data to</param>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.#ctor(Barebones.Networking.EndianBitConverter,System.IO.Stream,System.Text.Encoding)">
            <summary>
                Constructs a new binary writer with the given bit converter, writing
                to the given stream, using the given encoding.
            </summary>
            <param name="bitConverter">Converter to use when writing data</param>
            <param name="stream">Stream to write data to</param>
            <param name="encoding">Encoding to use when writing character data</param>
        </member>
        <member name="P:Barebones.Networking.EndianBinaryWriter.BitConverter">
            <summary>
                The bit converter used to write values to the stream
            </summary>
        </member>
        <member name="P:Barebones.Networking.EndianBinaryWriter.Encoding">
            <summary>
                The encoding used to write strings
            </summary>
        </member>
        <member name="P:Barebones.Networking.EndianBinaryWriter.BaseStream">
            <summary>
                Gets the underlying stream of the EndianBinaryWriter.
            </summary>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.Close">
            <summary>
                Closes the writer, including the underlying stream.
            </summary>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.Flush">
            <summary>
                Flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
            <summary>
                Seeks within the stream.
            </summary>
            <param name="offset">Offset to seek to.</param>
            <param name="origin">Origin of seek operation.</param>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.Write(System.Boolean)">
            <summary>
                Writes a boolean value to the stream. 1 byte is written.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.Write(System.Int16)">
            <summary>
                Writes a 16-bit signed integer to the stream, using the bit converter
                for this writer. 2 bytes are written.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.Write(System.Int32)">
            <summary>
                Writes a 32-bit signed integer to the stream, using the bit converter
                for this writer. 4 bytes are written.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.Write(System.Int64)">
            <summary>
                Writes a 64-bit signed integer to the stream, using the bit converter
                for this writer. 8 bytes are written.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.Write(System.UInt16)">
            <summary>
                Writes a 16-bit unsigned integer to the stream, using the bit converter
                for this writer. 2 bytes are written.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.Write(System.UInt32)">
            <summary>
                Writes a 32-bit unsigned integer to the stream, using the bit converter
                for this writer. 4 bytes are written.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.Write(System.UInt64)">
            <summary>
                Writes a 64-bit unsigned integer to the stream, using the bit converter
                for this writer. 8 bytes are written.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.Write(System.Single)">
            <summary>
                Writes a single-precision floating-point value to the stream, using the bit converter
                for this writer. 4 bytes are written.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.Write(System.Double)">
            <summary>
                Writes a double-precision floating-point value to the stream, using the bit converter
                for this writer. 8 bytes are written.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.Write(System.Decimal)">
            <summary>
                Writes a decimal value to the stream, using the bit converter for this writer.
                16 bytes are written.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.Write(System.Byte)">
            <summary>
                Writes a signed byte to the stream.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.Write(System.SByte)">
            <summary>
                Writes an unsigned byte to the stream.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.Write(System.Byte[])">
            <summary>
                Writes an array of bytes to the stream.
            </summary>
            <param name="value">The values to write</param>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Writes a portion of an array of bytes to the stream.
            </summary>
            <param name="value">An array containing the bytes to write</param>
            <param name="offset">The index of the first byte to write within the array</param>
            <param name="count">The number of bytes to write</param>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.Write(System.Char)">
            <summary>
                Writes a single character to the stream, using the encoding for this writer.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.Write(System.Char[])">
            <summary>
                Writes an array of characters to the stream, using the encoding for this writer.
            </summary>
            <param name="value">An array containing the characters to write</param>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.Write(System.String)">
            <summary>
                Writes a string to the stream, using the encoding for this writer.
            </summary>
            <param name="value">The value to write. Must not be null.</param>
            <exception cref="T:System.ArgumentNullException">value is null</exception>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.Write7BitEncodedInt(System.Int32)">
            <summary>
                Writes a 7-bit encoded integer from the stream. This is stored with the least significant
                information first, with 7 bits of information per byte of value, and the top
                bit as a continuation flag.
            </summary>
            <param name="value">The 7-bit encoded integer to write to the stream</param>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.CheckDisposed">
            <summary>
                Checks whether or not the writer has been disposed, throwing an exception if so.
            </summary>
        </member>
        <member name="M:Barebones.Networking.EndianBinaryWriter.WriteInternal(System.Byte[],System.Int32)">
            <summary>
                Writes the specified number of bytes from the start of the given byte array,
                after checking whether or not the writer has been disposed.
            </summary>
            <param name="bytes">The array of bytes to write from</param>
            <param name="length">The number of bytes to write</param>
        </member>
        <member name="T:Barebones.Utils.BmAutoEnabler">
            <summary>
                A script that enables all of the objects within the list.
                Useful for enabling objects that you don't want enabled in the editor
            </summary>
        </member>
        <member name="M:Barebones.Utils.BmHelper.CreateRandomString(System.Int32)">
            <summary>
            Creates a random string of a given length.
            Uses a substring of guid
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:Barebones.Utils.GenericUIList`2">
            <summary>
            </summary>
            <typeparam name="T">Data type</typeparam>
            <typeparam name="T2">Item component type</typeparam>
            // TODO make sure I remember the reason for generic types and hanging to GameObject
        </member>
        <member name="M:Barebones.Utils.GenericUIList`2.Iterate(System.Action{`1})">
            <summary>
            </summary>
            <typeparam name="T2">Component to retrieve</typeparam>
            <param name="expression"></param>
        </member>
        <member name="T:Barebones.Utils.GenericUIList`1">
            <summary>
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="M:Barebones.Utils.GenericUIList`1.Iterate``1(System.Action{``0})">
            <summary>
            </summary>
            <typeparam name="T2">Component to retrieve</typeparam>
            <param name="expression"></param>
        </member>
        <member name="P:Barebones.Utils.SafeCoroutine.Runner">
            <summary>
                Runner, that gets destroyed on scene change
            </summary>
        </member>
        <member name="P:Barebones.Utils.SafeCoroutine.PermanentRunner">
            <summary>
                Runner, that remains when scene changes
            </summary>
        </member>
        <member name="M:Barebones.Utils.SafeCoroutine.WaitAndCatchException(System.Collections.IEnumerator,Barebones.Utils.SafeCoroutine.InvokeCallbackHandler,System.Boolean)">
            <summary>
                Waits for coroutine to finish and calls a callback.
                Callback is invoked with "true" if no exception was thrown
            </summary>
            <param name="coroutine"></param>
            <param name="callback"></param>
            <param name="usePermanentRunner">
                If true, will run coroutine on an object
                which is not destroyed on scene change
            </param>
        </member>
        <member name="T:Barebones.LogEntry">
            <summary>
            Holds one unity console message
            </summary>
        </member>
        <member name="T:Barebones.GUIConsole">
            <summary>
            Implements a GUIWindow with a visual console listing
            </summary>
        </member>
        <member name="M:Barebones.GUIConsole.FormatLogEntry(Barebones.LogEntry,System.Int32)">
            <summary>
            Format a log entry with all the options
            </summary>
        </member>
        <member name="M:Barebones.GUIConsole.CountDuplicates(System.Int32,Barebones.LogEntry)">
            <summary>
            count consecutive log entries that are exact duplicates
            </summary>
        </member>
        <member name="M:Barebones.GUIConsole.OnLogMessageReceived(System.String,System.String,UnityEngine.LogType)">
            <summary>
            handle a log message received event - save the log message into a list
            </summary>
        </member>
        <member name="F:UnetRoomConnector.LogLevel">
            <summary>
                Log level of connector
            </summary>
        </member>
        <member name="M:UnetServerStarter.OnRoomRegistered(Barebones.MasterServer.RoomController)">
            <summary>
            This will be called when a room is created and registered to "master"
            </summary>
        </member>
        <member name="M:JSONObject.Create(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Create a JSONObject by parsing string data
            </summary>
            <param name="val">The string to be parsed</param>
            <param name="maxDepth">The maximum depth for the parser to search.  Set this to to 1 for the first level, 
            2 for the first 2 levels, etc.  It defaults to -2 because -1 is the depth value that is parsed (see below)</param>
            <param name="storeExcessLevels">Whether to store levels beyond maxDepth in baked JSONObjects</param>
            <param name="strict">Whether to be strict in the parsing. For example, non-strict parsing will successfully 
            parse "a string" into a string-type </param>
            <returns></returns>
        </member>
        <member name="M:JSONObject.Copy">
            <summary>
            Copy a JSONObject. This could probably work better
            </summary>
            <returns></returns>
        </member>
        <member name="M:JSONObject.MergeRecur(JSONObject,JSONObject)">
            <summary>
            Merge object right into left recursively
            </summary>
            <param name="left">The left (base) object</param>
            <param name="right">The right (new) object</param>
        </member>
        <member name="T:ClientUI.GameConnectorUI">
            <summary>
                Game creation window
            </summary>
        </member>
        <member name="F:ConnectFour.GameController.field">
            <summary>
            The Game field.
            0 = Empty
            1 = Blue
            2 = Red
            </summary>
        </member>
        <member name="M:ConnectFour.GameController.CreateField">
            <summary>
            Creates the field.
            </summary>
        </member>
        <member name="M:ConnectFour.GameController.SpawnPiece">
            <summary>
            Spawns a piece at mouse position above the first row
            </summary>
            <returns>The piece.</returns>
        </member>
        <member name="M:ConnectFour.GameController.GetPossibleMoves">
            <summary>
            Gets all the possible moves.
            </summary>
            <returns>The possible moves.</returns>
        </member>
        <member name="M:ConnectFour.GameController.dropPiece(UnityEngine.GameObject)">
            <summary>
            This method searches for a empty cell and lets 
            the object fall down into this cell
            </summary>
            <param name="gObject">Game Object.</param>
        </member>
        <member name="M:ConnectFour.GameController.FieldContainsEmptyCell">
            <summary>
            Check for Winner
            </summary>
            <summary>
            check if the field contains an empty cell
            </summary>
            <returns><c>true</c>, if it contains empty cell, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TCP_API.APIMsgConclusion">
            <summary>
            Container of information regarding the parsed TCP msg and what to do with that information.
            </summary>
        </member>
        <member name="T:TCP_API.APIMessageRouterBase">
            <summary>
            The base class for all games that implements a TCP API handler.
            
            Contains a dictionary that maps parsed actions to handlers, so in order to use this all handlers for possible actions must be linked.
            If an action is found, but there is no specified handler it will return "errorParsingJson".
            
            TODO: Implement a more detailed error system than only responding with "errorParsingJson"
            </summary>
        </member>
        <member name="M:TCP_API.APIMessageRouterBase.handleIncomingMsg(System.String)">
            <summary>
            Takes the raw text input sent from the client and parses it to Json.
            Thereafter it founds the specified handler for that action.
            </summary>
            <param name="msg"></param>
            <returns>APIMsgConclusion</returns>
        </member>
        <member name="M:TCP_API.Connect4.APIGameLogic.simulateMove(TCP_API.Connect4.Connect4Command)">
            <summary>
            Simulates the future board, depending on the specified current board and move.
            </summary>
            <param name="command"></param>
            <returns>APIMsgConclusion</returns>
        </member>
        <member name="M:TCP_API.Connect4.APIGameLogic.aquirePossibleMoves(TCP_API.Connect4.Connect4Command)">
            <summary>
            Returns a list of possible available moves, depening on the specified current board.
            </summary>
            <param name="command"></param>
            <returns>APIMsgConclusion</returns>
        </member>
        <member name="T:TCP_API.Connect4.Consts">
            <summary>
            Constants regarding API commands and fields.
            </summary>
        </member>
        <member name="T:TCP_API.Connect4.Connect4Command">
            <summary>
            Container of the parsed information from the Json msg sent by the user.
            This information later specifies what actions should be taken regarding how we respond.
            </summary>
        </member>
        <member name="T:TCP_API.Connect4.Board">
            <summary>
            Board representation of the a Connect4 game state.
            
            TODO Optimize
            </summary>
        </member>
        <member name="M:TCP_API.Connect4.Utils.iterateBoard(System.Action{System.Int32,System.Int32})">
            <summary>
            Iterates through all the possible cells in a Connec4 grid, and applies the action "a".
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:TCP_API.Connect4.Utils.parseBoard(System.String)">
            <summary>
            Takes raw text representation of the board and returns a Board Obj.
            </summary>
            <param name="board"></param>
            <returns>Board</returns>
        </member>
        <member name="M:TCP_API.Connect4.Connect4APIRouter.#ctor">
            <summary>
            Initializes the action handlers
            </summary>
        </member>
        <member name="M:DigitalRuby.AnimatedLineRenderer.AnimatedLineRenderer.Enqueue(UnityEngine.Vector3)">
            <summary>
            Enqueue a line segment, using SecondsPerLine for the duration
            </summary>
            <param name="pos">Position of the line segment</param>
            <returns>True if enqueued, false if not</returns>
        </member>
        <member name="M:DigitalRuby.AnimatedLineRenderer.AnimatedLineRenderer.Enqueue(UnityEngine.Vector3,System.Single)">
            <summary>
            Enqueue a line segment
            </summary>
            <param name="pos">Position of the line segment</param>
            <param name="duration">Duration the line segment should take to become the full length</param>
            <returns>True if enqueued, false if not</returns>
        </member>
        <member name="M:DigitalRuby.AnimatedLineRenderer.AnimatedLineRenderer.Reset">
            <summary>
            Reset the line renderer, setting everything back to defaults
            </summary>
        </member>
        <member name="M:DigitalRuby.AnimatedLineRenderer.AnimatedLineRenderer.ResetAfterSeconds(System.Single)">
            <summary>
            Reset the line renderer, fading out smoothly over seconds
            </summary>
            <param name="seconds">Seconds to fade out</param>
        </member>
        <member name="M:DigitalRuby.AnimatedLineRenderer.AnimatedLineRenderer.ResetAfterSeconds(System.Single,System.Nullable{UnityEngine.Vector3})">
            <summary>
            Reset the line renderer, fading out smoothly over seconds
            </summary>
            <param name="seconds">Seconds to fade out</param>
            <param name="endPoint">Force the end point to a new value (optional)</param>
        </member>
        <member name="M:DigitalRuby.AnimatedLineRenderer.AnimatedLineRenderer.ResetAfterSeconds(System.Single,System.Nullable{UnityEngine.Vector3},System.Action)">
            <summary>
            Reset the line renderer, fading out smoothly over seconds
            </summary>
            <param name="seconds">Seconds to fade out</param>
            <param name="callback">Callback when the fade out is finished</param>
        </member>
        <member name="P:DigitalRuby.AnimatedLineRenderer.AnimatedLineRenderer.LineRenderer">
            <summary>
            The Unity Line Renderer
            </summary>
        </member>
        <member name="P:DigitalRuby.AnimatedLineRenderer.AnimatedLineRenderer.StartPoint">
            <summary>
            The current line start point (point index 0)
            </summary>
        </member>
        <member name="P:DigitalRuby.AnimatedLineRenderer.AnimatedLineRenderer.EndPoint">
            <summary>
            The current line end point (point index n - 1)
            </summary>
        </member>
        <member name="P:DigitalRuby.AnimatedLineRenderer.AnimatedLineRenderer.Resetting">
            <summary>
            Is the line renderer in the process of resetting?
            </summary>
        </member>
        <member name="F:AlbotGameRoom.AccessMsgType">
            <summary>
            Unet msg type 
            </summary>
        </member>
        <member name="M:AlbotGameRoom.OnStartServer">
            <summary>
            This will be called, when game server starts
            </summary>
        </member>
        <member name="M:AlbotGameRoom.BeforeRegisteringRoom">
            <summary>
            This method is called before creating a room. It can be used to
            extract some parameters from cmd args or from span task properties
            </summary>
        </member>
        <member name="M:AlbotGameRoom.BeforeSendingRegistrationOptions(Barebones.MasterServer.RoomOptions)">
            <summary>
            Override this method, if you want to make some changes to registration options
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:AlbotGameRoom.OnRoomRegistered(Barebones.MasterServer.RoomController)">
            <summary>
            Called when room is registered to the "master server"
            </summary>
            <param name="roomController"></param>
        </member>
        <member name="M:AlbotGameRoom.CreateAccess(Barebones.MasterServer.UsernameAndPeerIdPacket,Barebones.MasterServer.RoomAccessProviderCallback)">
            <summary>
            Override, if you want to manually handle creation of access'es
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AlbotGameRoom.CreateSpawnFinalizationData">
            <summary>
            This dictionary will be sent to "master server" when we want 
            notify "master" server that Spawn Process is completed
            </summary>
            <returns></returns>
        </member>
        <member name="M:AlbotGameTerminator.StartWaitingForConnectionLost">
            <summary>
                Each second checks if we're still connected, and if we are not,
                terminates game server
            </summary>
            <returns></returns>
        </member>
        <member name="M:AlbotGameTerminator.StartStartedTimeout(System.Single)">
            <summary>
                Waits a number of seconds, and checks if the game room was registered
                If not - terminates the application
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
